
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001d5c  00001df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000270  0080008c  0080008c  00001e1c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000203  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b89  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ea  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a3d  00000000  00000000  00002eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  000038f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024c  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000688  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00004314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__vector_1>
       8:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_2>
       c:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3f       	cpi	r26, 0xFC	; 252
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <main>
      8a:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <OnLedMatrix>:
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
      92:	fc 01       	movw	r30, r24
      94:	23 e0       	ldi	r18, 0x03	; 3
      96:	ee 0f       	add	r30, r30
      98:	ff 1f       	adc	r31, r31
      9a:	2a 95       	dec	r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <OnLedMatrix+0x4>
      9e:	e8 0f       	add	r30, r24
      a0:	f9 1f       	adc	r31, r25
      a2:	e6 0f       	add	r30, r22
      a4:	f7 1f       	adc	r31, r23
      a6:	ee 0f       	add	r30, r30
      a8:	ff 1f       	adc	r31, r31
      aa:	e6 53       	subi	r30, 0x36	; 54
      ac:	fe 4f       	sbci	r31, 0xFE	; 254
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	91 83       	std	Z+1, r25	; 0x01
      b4:	80 83       	st	Z, r24
}
      b6:	08 95       	ret

000000b8 <getRow>:

int getRow(int x) {
      b8:	cf 93       	push	r28
      ba:	df 93       	push	r29
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	41 e0       	ldi	r20, 0x01	; 1
      c2:	50 e0       	ldi	r21, 0x00	; 0
	int row = 0;
	for (int i = 1; i <= 8; i++){
		 row = row | (matrix[x][i] << (8-i));
      c4:	bc 01       	movw	r22, r24
      c6:	e3 e0       	ldi	r30, 0x03	; 3
      c8:	66 0f       	add	r22, r22
      ca:	77 1f       	adc	r23, r23
      cc:	ea 95       	dec	r30
      ce:	e1 f7       	brne	.-8      	; 0xc8 <getRow+0x10>
      d0:	68 0f       	add	r22, r24
      d2:	79 1f       	adc	r23, r25
      d4:	c8 e0       	ldi	r28, 0x08	; 8
      d6:	d0 e0       	ldi	r29, 0x00	; 0
      d8:	fb 01       	movw	r30, r22
      da:	e4 0f       	add	r30, r20
      dc:	f5 1f       	adc	r31, r21
      de:	ee 0f       	add	r30, r30
      e0:	ff 1f       	adc	r31, r31
      e2:	e6 53       	subi	r30, 0x36	; 54
      e4:	fe 4f       	sbci	r31, 0xFE	; 254
      e6:	80 81       	ld	r24, Z
      e8:	91 81       	ldd	r25, Z+1	; 0x01
      ea:	9e 01       	movw	r18, r28
      ec:	24 1b       	sub	r18, r20
      ee:	35 0b       	sbc	r19, r21
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <getRow+0x3e>
      f2:	88 0f       	add	r24, r24
      f4:	99 1f       	adc	r25, r25
      f6:	2a 95       	dec	r18
      f8:	e2 f7       	brpl	.-8      	; 0xf2 <getRow+0x3a>
      fa:	a8 2b       	or	r26, r24
      fc:	b9 2b       	or	r27, r25
	matrix[r][c] = 1;
}

int getRow(int x) {
	int row = 0;
	for (int i = 1; i <= 8; i++){
      fe:	4f 5f       	subi	r20, 0xFF	; 255
     100:	5f 4f       	sbci	r21, 0xFF	; 255
     102:	49 30       	cpi	r20, 0x09	; 9
     104:	51 05       	cpc	r21, r1
     106:	41 f7       	brne	.-48     	; 0xd8 <getRow+0x20>
		 row = row | (matrix[x][i] << (8-i));
	}
	return row;
}
     108:	cd 01       	movw	r24, r26
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <getCol>:

int getCol(int x){
     110:	bc 01       	movw	r22, r24
     112:	40 e0       	ldi	r20, 0x00	; 0
     114:	50 e0       	ldi	r21, 0x00	; 0
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	30 e0       	ldi	r19, 0x00	; 0
	int col = 0;
	for (int i = 1; i <= 8; i++){
		 col = col | (matrix[i][x] << (i-1));
     11a:	f9 01       	movw	r30, r18
     11c:	b3 e0       	ldi	r27, 0x03	; 3
     11e:	ee 0f       	add	r30, r30
     120:	ff 1f       	adc	r31, r31
     122:	ba 95       	dec	r27
     124:	e1 f7       	brne	.-8      	; 0x11e <getCol+0xe>
     126:	e2 0f       	add	r30, r18
     128:	f3 1f       	adc	r31, r19
     12a:	e6 0f       	add	r30, r22
     12c:	f7 1f       	adc	r31, r23
     12e:	ee 0f       	add	r30, r30
     130:	ff 1f       	adc	r31, r31
     132:	e6 53       	subi	r30, 0x36	; 54
     134:	fe 4f       	sbci	r31, 0xFE	; 254
     136:	80 81       	ld	r24, Z
     138:	91 81       	ldd	r25, Z+1	; 0x01
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	30 40       	sbci	r19, 0x00	; 0
     13e:	02 2e       	mov	r0, r18
     140:	02 c0       	rjmp	.+4      	; 0x146 <getCol+0x36>
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	0a 94       	dec	r0
     148:	e2 f7       	brpl	.-8      	; 0x142 <getCol+0x32>
     14a:	48 2b       	or	r20, r24
     14c:	59 2b       	or	r21, r25
	return row;
}

int getCol(int x){
	int col = 0;
	for (int i = 1; i <= 8; i++){
     14e:	2e 5f       	subi	r18, 0xFE	; 254
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	29 30       	cpi	r18, 0x09	; 9
     154:	31 05       	cpc	r19, r1
     156:	09 f7       	brne	.-62     	; 0x11a <getCol+0xa>
		 col = col | (matrix[i][x] << (i-1));
	}
	return col;
}
     158:	ca 01       	movw	r24, r20
     15a:	08 95       	ret

0000015c <genarate_Line>:

//Line

int genarate_Line(int r, int c){
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	fc 01       	movw	r30, r24
     166:	8b 01       	movw	r16, r22
	if (RotateBlock  % 2 == 0){
     168:	80 91 8c 00 	lds	r24, 0x008C
     16c:	90 91 8d 00 	lds	r25, 0x008D
     170:	80 fd       	sbrc	r24, 0
     172:	45 c0       	rjmp	.+138    	; 0x1fe <genarate_Line+0xa2>
		if (r > 16 || c < 2 || c > 7){
     174:	e1 31       	cpi	r30, 0x11	; 17
     176:	f1 05       	cpc	r31, r1
     178:	0c f0       	brlt	.+2      	; 0x17c <genarate_Line+0x20>
     17a:	9f c0       	rjmp	.+318    	; 0x2ba <genarate_Line+0x15e>
     17c:	62 30       	cpi	r22, 0x02	; 2
     17e:	71 05       	cpc	r23, r1
     180:	0c f4       	brge	.+2      	; 0x184 <genarate_Line+0x28>
     182:	9b c0       	rjmp	.+310    	; 0x2ba <genarate_Line+0x15e>
     184:	68 30       	cpi	r22, 0x08	; 8
     186:	71 05       	cpc	r23, r1
     188:	0c f0       	brlt	.+2      	; 0x18c <genarate_Line+0x30>
     18a:	97 c0       	rjmp	.+302    	; 0x2ba <genarate_Line+0x15e>
			return 0;
		}
		if (matrix[r][c] == 0 && matrix[r][c-1] == 0 && matrix[r][c+1] == 0){
     18c:	9f 01       	movw	r18, r30
     18e:	43 e0       	ldi	r20, 0x03	; 3
     190:	22 0f       	add	r18, r18
     192:	33 1f       	adc	r19, r19
     194:	4a 95       	dec	r20
     196:	e1 f7       	brne	.-8      	; 0x190 <genarate_Line+0x34>
     198:	2e 0f       	add	r18, r30
     19a:	3f 1f       	adc	r19, r31
     19c:	e9 01       	movw	r28, r18
     19e:	c6 0f       	add	r28, r22
     1a0:	d7 1f       	adc	r29, r23
     1a2:	cc 0f       	add	r28, r28
     1a4:	dd 1f       	adc	r29, r29
     1a6:	c6 53       	subi	r28, 0x36	; 54
     1a8:	de 4f       	sbci	r29, 0xFE	; 254
     1aa:	88 81       	ld	r24, Y
     1ac:	99 81       	ldd	r25, Y+1	; 0x01
     1ae:	89 2b       	or	r24, r25
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <genarate_Line+0x58>
     1b2:	83 c0       	rjmp	.+262    	; 0x2ba <genarate_Line+0x15e>
     1b4:	db 01       	movw	r26, r22
     1b6:	11 97       	sbiw	r26, 0x01	; 1
     1b8:	a2 0f       	add	r26, r18
     1ba:	b3 1f       	adc	r27, r19
     1bc:	aa 0f       	add	r26, r26
     1be:	bb 1f       	adc	r27, r27
     1c0:	a6 53       	subi	r26, 0x36	; 54
     1c2:	be 4f       	sbci	r27, 0xFE	; 254
     1c4:	8d 91       	ld	r24, X+
     1c6:	9c 91       	ld	r25, X
     1c8:	11 97       	sbiw	r26, 0x01	; 1
     1ca:	89 2b       	or	r24, r25
     1cc:	09 f0       	breq	.+2      	; 0x1d0 <genarate_Line+0x74>
     1ce:	75 c0       	rjmp	.+234    	; 0x2ba <genarate_Line+0x15e>
     1d0:	fb 01       	movw	r30, r22
     1d2:	31 96       	adiw	r30, 0x01	; 1
     1d4:	e2 0f       	add	r30, r18
     1d6:	f3 1f       	adc	r31, r19
     1d8:	ee 0f       	add	r30, r30
     1da:	ff 1f       	adc	r31, r31
     1dc:	e6 53       	subi	r30, 0x36	; 54
     1de:	fe 4f       	sbci	r31, 0xFE	; 254
     1e0:	80 81       	ld	r24, Z
     1e2:	91 81       	ldd	r25, Z+1	; 0x01
     1e4:	89 2b       	or	r24, r25
     1e6:	09 f0       	breq	.+2      	; 0x1ea <genarate_Line+0x8e>
     1e8:	68 c0       	rjmp	.+208    	; 0x2ba <genarate_Line+0x15e>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	99 83       	std	Y+1, r25	; 0x01
     1f0:	88 83       	st	Y, r24
			OnLedMatrix(r,c-1);
			OnLedMatrix(r,c+1);
			return 1;
		}
	}
	else if (RotateBlock  % 2 == 1){
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	9c 93       	st	X, r25
     1f6:	8e 93       	st	-X, r24
     1f8:	91 83       	std	Z+1, r25	; 0x01
     1fa:	80 83       	st	Z, r24
     1fc:	5b c0       	rjmp	.+182    	; 0x2b4 <genarate_Line+0x158>
     1fe:	80 91 8c 00 	lds	r24, 0x008C
     202:	90 91 8d 00 	lds	r25, 0x008D
     206:	62 e0       	ldi	r22, 0x02	; 2
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     20e:	9c 01       	movw	r18, r24
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	91 05       	cpc	r25, r1
     214:	09 f0       	breq	.+2      	; 0x218 <genarate_Line+0xbc>
     216:	51 c0       	rjmp	.+162    	; 0x2ba <genarate_Line+0x15e>
		if (r > 15 || c < 1 || c > 8){
     218:	e0 31       	cpi	r30, 0x10	; 16
     21a:	f1 05       	cpc	r31, r1
     21c:	0c f0       	brlt	.+2      	; 0x220 <genarate_Line+0xc4>
     21e:	4d c0       	rjmp	.+154    	; 0x2ba <genarate_Line+0x15e>
     220:	10 16       	cp	r1, r16
     222:	11 06       	cpc	r1, r17
     224:	0c f0       	brlt	.+2      	; 0x228 <genarate_Line+0xcc>
     226:	49 c0       	rjmp	.+146    	; 0x2ba <genarate_Line+0x15e>
     228:	09 30       	cpi	r16, 0x09	; 9
     22a:	11 05       	cpc	r17, r1
     22c:	0c f0       	brlt	.+2      	; 0x230 <genarate_Line+0xd4>
     22e:	45 c0       	rjmp	.+138    	; 0x2ba <genarate_Line+0x15e>
			return 0;
		}
		if (matrix[r][c] == 0 && matrix[r-1][c] == 0 && matrix[r+1][c] == 0){
     230:	ef 01       	movw	r28, r30
     232:	a3 e0       	ldi	r26, 0x03	; 3
     234:	cc 0f       	add	r28, r28
     236:	dd 1f       	adc	r29, r29
     238:	aa 95       	dec	r26
     23a:	e1 f7       	brne	.-8      	; 0x234 <genarate_Line+0xd8>
     23c:	ce 0f       	add	r28, r30
     23e:	df 1f       	adc	r29, r31
     240:	c0 0f       	add	r28, r16
     242:	d1 1f       	adc	r29, r17
     244:	cc 0f       	add	r28, r28
     246:	dd 1f       	adc	r29, r29
     248:	c6 53       	subi	r28, 0x36	; 54
     24a:	de 4f       	sbci	r29, 0xFE	; 254
     24c:	88 81       	ld	r24, Y
     24e:	99 81       	ldd	r25, Y+1	; 0x01
     250:	89 2b       	or	r24, r25
     252:	99 f5       	brne	.+102    	; 0x2ba <genarate_Line+0x15e>
     254:	cf 01       	movw	r24, r30
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	dc 01       	movw	r26, r24
     25a:	63 e0       	ldi	r22, 0x03	; 3
     25c:	aa 0f       	add	r26, r26
     25e:	bb 1f       	adc	r27, r27
     260:	6a 95       	dec	r22
     262:	e1 f7       	brne	.-8      	; 0x25c <genarate_Line+0x100>
     264:	a8 0f       	add	r26, r24
     266:	b9 1f       	adc	r27, r25
     268:	a0 0f       	add	r26, r16
     26a:	b1 1f       	adc	r27, r17
     26c:	aa 0f       	add	r26, r26
     26e:	bb 1f       	adc	r27, r27
     270:	a6 53       	subi	r26, 0x36	; 54
     272:	be 4f       	sbci	r27, 0xFE	; 254
     274:	8d 91       	ld	r24, X+
     276:	9c 91       	ld	r25, X
     278:	11 97       	sbiw	r26, 0x01	; 1
     27a:	89 2b       	or	r24, r25
     27c:	f1 f4       	brne	.+60     	; 0x2ba <genarate_Line+0x15e>
     27e:	cf 01       	movw	r24, r30
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	fc 01       	movw	r30, r24
     284:	43 e0       	ldi	r20, 0x03	; 3
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	4a 95       	dec	r20
     28c:	e1 f7       	brne	.-8      	; 0x286 <genarate_Line+0x12a>
     28e:	e8 0f       	add	r30, r24
     290:	f9 1f       	adc	r31, r25
     292:	e0 0f       	add	r30, r16
     294:	f1 1f       	adc	r31, r17
     296:	ee 0f       	add	r30, r30
     298:	ff 1f       	adc	r31, r31
     29a:	e6 53       	subi	r30, 0x36	; 54
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	80 81       	ld	r24, Z
     2a0:	91 81       	ldd	r25, Z+1	; 0x01
     2a2:	89 2b       	or	r24, r25
     2a4:	51 f4       	brne	.+20     	; 0x2ba <genarate_Line+0x15e>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     2a6:	39 83       	std	Y+1, r19	; 0x01
     2a8:	28 83       	st	Y, r18
		}
		if (matrix[r][c] == 0 && matrix[r-1][c] == 0 && matrix[r+1][c] == 0){
			OnLedMatrix(r,c);
			OnLedMatrix(r-1,c);
			OnLedMatrix(r+1,c);
			return 1;
     2aa:	11 96       	adiw	r26, 0x01	; 1
     2ac:	3c 93       	st	X, r19
     2ae:	2e 93       	st	-X, r18
     2b0:	31 83       	std	Z+1, r19	; 0x01
     2b2:	20 83       	st	Z, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <genarate_Line+0x162>
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	return 0;
}
     2be:	c9 01       	movw	r24, r18
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <genarate_Box>:

//Box

int genarate_Box(int r, int c){
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	fc 01       	movw	r30, r24
	if (r > 16 || c < 1 || c > 7) {
     2d4:	81 31       	cpi	r24, 0x11	; 17
     2d6:	91 05       	cpc	r25, r1
     2d8:	0c f0       	brlt	.+2      	; 0x2dc <genarate_Box+0x12>
     2da:	5d c0       	rjmp	.+186    	; 0x396 <genarate_Box+0xcc>
     2dc:	16 16       	cp	r1, r22
     2de:	17 06       	cpc	r1, r23
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <genarate_Box+0x1a>
     2e2:	59 c0       	rjmp	.+178    	; 0x396 <genarate_Box+0xcc>
     2e4:	68 30       	cpi	r22, 0x08	; 8
     2e6:	71 05       	cpc	r23, r1
     2e8:	0c f0       	brlt	.+2      	; 0x2ec <genarate_Box+0x22>
     2ea:	55 c0       	rjmp	.+170    	; 0x396 <genarate_Box+0xcc>
		return 0;
	}
	if (matrix[r][c] == 0 && matrix[r][c+1] == 0 && matrix[r-1][c] == 0 && matrix[r-1][c+1] == 0){
     2ec:	9c 01       	movw	r18, r24
     2ee:	43 e0       	ldi	r20, 0x03	; 3
     2f0:	22 0f       	add	r18, r18
     2f2:	33 1f       	adc	r19, r19
     2f4:	4a 95       	dec	r20
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <genarate_Box+0x26>
     2f8:	28 0f       	add	r18, r24
     2fa:	39 1f       	adc	r19, r25
     2fc:	a9 01       	movw	r20, r18
     2fe:	46 0f       	add	r20, r22
     300:	57 1f       	adc	r21, r23
     302:	44 0f       	add	r20, r20
     304:	55 1f       	adc	r21, r21
     306:	46 53       	subi	r20, 0x36	; 54
     308:	5e 4f       	sbci	r21, 0xFE	; 254
     30a:	da 01       	movw	r26, r20
     30c:	8d 91       	ld	r24, X+
     30e:	9c 91       	ld	r25, X
     310:	89 2b       	or	r24, r25
     312:	09 f0       	breq	.+2      	; 0x316 <genarate_Box+0x4c>
     314:	40 c0       	rjmp	.+128    	; 0x396 <genarate_Box+0xcc>
     316:	8b 01       	movw	r16, r22
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	d9 01       	movw	r26, r18
     31e:	a0 0f       	add	r26, r16
     320:	b1 1f       	adc	r27, r17
     322:	aa 0f       	add	r26, r26
     324:	bb 1f       	adc	r27, r27
     326:	a6 53       	subi	r26, 0x36	; 54
     328:	be 4f       	sbci	r27, 0xFE	; 254
     32a:	8d 91       	ld	r24, X+
     32c:	9c 91       	ld	r25, X
     32e:	11 97       	sbiw	r26, 0x01	; 1
     330:	89 2b       	or	r24, r25
     332:	89 f5       	brne	.+98     	; 0x396 <genarate_Box+0xcc>
     334:	cf 01       	movw	r24, r30
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	9c 01       	movw	r18, r24
     33a:	e3 e0       	ldi	r30, 0x03	; 3
     33c:	22 0f       	add	r18, r18
     33e:	33 1f       	adc	r19, r19
     340:	ea 95       	dec	r30
     342:	e1 f7       	brne	.-8      	; 0x33c <genarate_Box+0x72>
     344:	28 0f       	add	r18, r24
     346:	39 1f       	adc	r19, r25
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	66 0f       	add	r22, r22
     34e:	77 1f       	adc	r23, r23
     350:	66 53       	subi	r22, 0x36	; 54
     352:	7e 4f       	sbci	r23, 0xFE	; 254
     354:	eb 01       	movw	r28, r22
     356:	88 81       	ld	r24, Y
     358:	99 81       	ldd	r25, Y+1	; 0x01
     35a:	89 2b       	or	r24, r25
     35c:	e1 f4       	brne	.+56     	; 0x396 <genarate_Box+0xcc>
     35e:	f9 01       	movw	r30, r18
     360:	e0 0f       	add	r30, r16
     362:	f1 1f       	adc	r31, r17
     364:	ee 0f       	add	r30, r30
     366:	ff 1f       	adc	r31, r31
     368:	e6 53       	subi	r30, 0x36	; 54
     36a:	fe 4f       	sbci	r31, 0xFE	; 254
     36c:	80 81       	ld	r24, Z
     36e:	91 81       	ldd	r25, Z+1	; 0x01
     370:	89 2b       	or	r24, r25
     372:	89 f4       	brne	.+34     	; 0x396 <genarate_Box+0xcc>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	ea 01       	movw	r28, r20
     37a:	99 83       	std	Y+1, r25	; 0x01
     37c:	88 83       	st	Y, r24
	if (matrix[r][c] == 0 && matrix[r][c+1] == 0 && matrix[r-1][c] == 0 && matrix[r-1][c+1] == 0){
		OnLedMatrix(r,c);
		OnLedMatrix(r,c+1);
		OnLedMatrix(r-1,c);
		OnLedMatrix(r-1,c+1);
		return 1;
     37e:	11 96       	adiw	r26, 0x01	; 1
     380:	9c 93       	st	X, r25
     382:	8e 93       	st	-X, r24
     384:	db 01       	movw	r26, r22
     386:	11 96       	adiw	r26, 0x01	; 1
     388:	9c 93       	st	X, r25
     38a:	8e 93       	st	-X, r24
     38c:	91 83       	std	Z+1, r25	; 0x01
     38e:	80 83       	st	Z, r24
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	02 c0       	rjmp	.+4      	; 0x39a <genarate_Box+0xd0>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
	}
	return 0;
}
     39a:	c9 01       	movw	r24, r18
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	08 95       	ret

000003a6 <genarate_T>:

//T

int genarate_T(int r, int c){
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	7c 01       	movw	r14, r24
     3b8:	8b 01       	movw	r16, r22
	if (RotateBlock  % 4 == 0){
     3ba:	80 91 8c 00 	lds	r24, 0x008C
     3be:	90 91 8d 00 	lds	r25, 0x008D
     3c2:	83 70       	andi	r24, 0x03	; 3
     3c4:	90 70       	andi	r25, 0x00	; 0
     3c6:	89 2b       	or	r24, r25
     3c8:	09 f0       	breq	.+2      	; 0x3cc <genarate_T+0x26>
     3ca:	60 c0       	rjmp	.+192    	; 0x48c <genarate_T+0xe6>
		if (r > 16 || c < 2 || c > 7) return 0;
     3cc:	81 e1       	ldi	r24, 0x11	; 17
     3ce:	e8 16       	cp	r14, r24
     3d0:	f1 04       	cpc	r15, r1
     3d2:	0c f0       	brlt	.+2      	; 0x3d6 <genarate_T+0x30>
     3d4:	f5 c1       	rjmp	.+1002   	; 0x7c0 <genarate_T+0x41a>
     3d6:	62 30       	cpi	r22, 0x02	; 2
     3d8:	71 05       	cpc	r23, r1
     3da:	0c f4       	brge	.+2      	; 0x3de <genarate_T+0x38>
     3dc:	f1 c1       	rjmp	.+994    	; 0x7c0 <genarate_T+0x41a>
     3de:	68 30       	cpi	r22, 0x08	; 8
     3e0:	71 05       	cpc	r23, r1
     3e2:	0c f0       	brlt	.+2      	; 0x3e6 <genarate_T+0x40>
     3e4:	ed c1       	rjmp	.+986    	; 0x7c0 <genarate_T+0x41a>
		if (matrix[r][c] == 0 && matrix[r][c-1] == 0 &&
     3e6:	97 01       	movw	r18, r14
     3e8:	73 e0       	ldi	r23, 0x03	; 3
     3ea:	22 0f       	add	r18, r18
     3ec:	33 1f       	adc	r19, r19
     3ee:	7a 95       	dec	r23
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <genarate_T+0x44>
     3f2:	2e 0d       	add	r18, r14
     3f4:	3f 1d       	adc	r19, r15
     3f6:	a9 01       	movw	r20, r18
     3f8:	40 0f       	add	r20, r16
     3fa:	51 1f       	adc	r21, r17
     3fc:	44 0f       	add	r20, r20
     3fe:	55 1f       	adc	r21, r21
     400:	46 53       	subi	r20, 0x36	; 54
     402:	5e 4f       	sbci	r21, 0xFE	; 254
     404:	da 01       	movw	r26, r20
     406:	8d 91       	ld	r24, X+
     408:	9c 91       	ld	r25, X
     40a:	11 97       	sbiw	r26, 0x01	; 1
     40c:	89 2b       	or	r24, r25
     40e:	09 f0       	breq	.+2      	; 0x412 <genarate_T+0x6c>
     410:	d7 c1       	rjmp	.+942    	; 0x7c0 <genarate_T+0x41a>
     412:	e8 01       	movw	r28, r16
     414:	21 97       	sbiw	r28, 0x01	; 1
     416:	c2 0f       	add	r28, r18
     418:	d3 1f       	adc	r29, r19
     41a:	cc 0f       	add	r28, r28
     41c:	dd 1f       	adc	r29, r29
     41e:	c6 53       	subi	r28, 0x36	; 54
     420:	de 4f       	sbci	r29, 0xFE	; 254
     422:	88 81       	ld	r24, Y
     424:	99 81       	ldd	r25, Y+1	; 0x01
     426:	89 2b       	or	r24, r25
     428:	09 f0       	breq	.+2      	; 0x42c <genarate_T+0x86>
     42a:	ca c1       	rjmp	.+916    	; 0x7c0 <genarate_T+0x41a>
     42c:	b8 01       	movw	r22, r16
     42e:	6f 5f       	subi	r22, 0xFF	; 255
     430:	7f 4f       	sbci	r23, 0xFF	; 255
     432:	62 0f       	add	r22, r18
     434:	73 1f       	adc	r23, r19
     436:	66 0f       	add	r22, r22
     438:	77 1f       	adc	r23, r23
     43a:	66 53       	subi	r22, 0x36	; 54
     43c:	7e 4f       	sbci	r23, 0xFE	; 254
     43e:	fb 01       	movw	r30, r22
     440:	80 81       	ld	r24, Z
     442:	91 81       	ldd	r25, Z+1	; 0x01
     444:	89 2b       	or	r24, r25
     446:	09 f0       	breq	.+2      	; 0x44a <genarate_T+0xa4>
     448:	bb c1       	rjmp	.+886    	; 0x7c0 <genarate_T+0x41a>
     44a:	c7 01       	movw	r24, r14
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	fc 01       	movw	r30, r24
     450:	23 e0       	ldi	r18, 0x03	; 3
     452:	ee 0f       	add	r30, r30
     454:	ff 1f       	adc	r31, r31
     456:	2a 95       	dec	r18
     458:	e1 f7       	brne	.-8      	; 0x452 <genarate_T+0xac>
     45a:	e8 0f       	add	r30, r24
     45c:	f9 1f       	adc	r31, r25
     45e:	e0 0f       	add	r30, r16
     460:	f1 1f       	adc	r31, r17
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	e6 53       	subi	r30, 0x36	; 54
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	80 81       	ld	r24, Z
     46c:	91 81       	ldd	r25, Z+1	; 0x01
     46e:	89 2b       	or	r24, r25
     470:	09 f0       	breq	.+2      	; 0x474 <genarate_T+0xce>
     472:	a6 c1       	rjmp	.+844    	; 0x7c0 <genarate_T+0x41a>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	9c 93       	st	X, r25
     47c:	8e 93       	st	-X, r24
			OnLedMatrix(r,c+1);
			OnLedMatrix(r-1,c);
			return 1;
		}
	}
	else if (RotateBlock % 4 == 1){
     47e:	99 83       	std	Y+1, r25	; 0x01
     480:	88 83       	st	Y, r24
     482:	db 01       	movw	r26, r22
     484:	11 96       	adiw	r26, 0x01	; 1
     486:	9c 93       	st	X, r25
     488:	8e 93       	st	-X, r24
     48a:	09 c1       	rjmp	.+530    	; 0x69e <genarate_T+0x2f8>
     48c:	80 91 8c 00 	lds	r24, 0x008C
     490:	90 91 8d 00 	lds	r25, 0x008D
     494:	64 e0       	ldi	r22, 0x04	; 4
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     49c:	bc 01       	movw	r22, r24
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	91 05       	cpc	r25, r1
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <genarate_T+0x100>
     4a4:	6b c0       	rjmp	.+214    	; 0x57c <genarate_T+0x1d6>
		if (r > 15 || c < 1 || c > 7) return 0;
     4a6:	b0 e1       	ldi	r27, 0x10	; 16
     4a8:	eb 16       	cp	r14, r27
     4aa:	f1 04       	cpc	r15, r1
     4ac:	0c f0       	brlt	.+2      	; 0x4b0 <genarate_T+0x10a>
     4ae:	88 c1       	rjmp	.+784    	; 0x7c0 <genarate_T+0x41a>
     4b0:	10 16       	cp	r1, r16
     4b2:	11 06       	cpc	r1, r17
     4b4:	0c f0       	brlt	.+2      	; 0x4b8 <genarate_T+0x112>
     4b6:	84 c1       	rjmp	.+776    	; 0x7c0 <genarate_T+0x41a>
     4b8:	08 30       	cpi	r16, 0x08	; 8
     4ba:	11 05       	cpc	r17, r1
     4bc:	0c f0       	brlt	.+2      	; 0x4c0 <genarate_T+0x11a>
     4be:	80 c1       	rjmp	.+768    	; 0x7c0 <genarate_T+0x41a>
		if (matrix[r][c] == 0 && matrix[r-1][c] == 0 &&
     4c0:	97 01       	movw	r18, r14
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	22 0f       	add	r18, r18
     4c6:	33 1f       	adc	r19, r19
     4c8:	8a 95       	dec	r24
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <genarate_T+0x11e>
     4cc:	2e 0d       	add	r18, r14
     4ce:	3f 1d       	adc	r19, r15
     4d0:	a9 01       	movw	r20, r18
     4d2:	40 0f       	add	r20, r16
     4d4:	51 1f       	adc	r21, r17
     4d6:	44 0f       	add	r20, r20
     4d8:	55 1f       	adc	r21, r21
     4da:	46 53       	subi	r20, 0x36	; 54
     4dc:	5e 4f       	sbci	r21, 0xFE	; 254
     4de:	fa 01       	movw	r30, r20
     4e0:	80 81       	ld	r24, Z
     4e2:	91 81       	ldd	r25, Z+1	; 0x01
     4e4:	89 2b       	or	r24, r25
     4e6:	09 f0       	breq	.+2      	; 0x4ea <genarate_T+0x144>
     4e8:	6b c1       	rjmp	.+726    	; 0x7c0 <genarate_T+0x41a>
     4ea:	c7 01       	movw	r24, r14
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	ec 01       	movw	r28, r24
     4f0:	a3 e0       	ldi	r26, 0x03	; 3
     4f2:	cc 0f       	add	r28, r28
     4f4:	dd 1f       	adc	r29, r29
     4f6:	aa 95       	dec	r26
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <genarate_T+0x14c>
     4fa:	c8 0f       	add	r28, r24
     4fc:	d9 1f       	adc	r29, r25
     4fe:	c0 0f       	add	r28, r16
     500:	d1 1f       	adc	r29, r17
     502:	cc 0f       	add	r28, r28
     504:	dd 1f       	adc	r29, r29
     506:	c6 53       	subi	r28, 0x36	; 54
     508:	de 4f       	sbci	r29, 0xFE	; 254
     50a:	88 81       	ld	r24, Y
     50c:	99 81       	ldd	r25, Y+1	; 0x01
     50e:	89 2b       	or	r24, r25
     510:	09 f0       	breq	.+2      	; 0x514 <genarate_T+0x16e>
     512:	56 c1       	rjmp	.+684    	; 0x7c0 <genarate_T+0x41a>
     514:	68 01       	movw	r12, r16
     516:	08 94       	sec
     518:	c1 1c       	adc	r12, r1
     51a:	d1 1c       	adc	r13, r1
     51c:	c2 0e       	add	r12, r18
     51e:	d3 1e       	adc	r13, r19
     520:	cc 0c       	add	r12, r12
     522:	dd 1c       	adc	r13, r13
     524:	8a ec       	ldi	r24, 0xCA	; 202
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	c8 0e       	add	r12, r24
     52a:	d9 1e       	adc	r13, r25
     52c:	d6 01       	movw	r26, r12
     52e:	8d 91       	ld	r24, X+
     530:	9c 91       	ld	r25, X
     532:	89 2b       	or	r24, r25
     534:	09 f0       	breq	.+2      	; 0x538 <genarate_T+0x192>
     536:	44 c1       	rjmp	.+648    	; 0x7c0 <genarate_T+0x41a>
     538:	c7 01       	movw	r24, r14
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	fc 01       	movw	r30, r24
     53e:	33 e0       	ldi	r19, 0x03	; 3
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	3a 95       	dec	r19
     546:	e1 f7       	brne	.-8      	; 0x540 <genarate_T+0x19a>
     548:	e8 0f       	add	r30, r24
     54a:	f9 1f       	adc	r31, r25
     54c:	e0 0f       	add	r30, r16
     54e:	f1 1f       	adc	r31, r17
     550:	ee 0f       	add	r30, r30
     552:	ff 1f       	adc	r31, r31
     554:	e6 53       	subi	r30, 0x36	; 54
     556:	fe 4f       	sbci	r31, 0xFE	; 254
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	89 2b       	or	r24, r25
     55e:	09 f0       	breq	.+2      	; 0x562 <genarate_T+0x1bc>
     560:	2f c1       	rjmp	.+606    	; 0x7c0 <genarate_T+0x41a>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     562:	da 01       	movw	r26, r20
     564:	11 96       	adiw	r26, 0x01	; 1
     566:	7c 93       	st	X, r23
     568:	6e 93       	st	-X, r22
			OnLedMatrix(r,c+1);
			OnLedMatrix(r+1,c);
			return 1;
		}
	}
	else if (RotateBlock  % 4 == 2){
     56a:	79 83       	std	Y+1, r23	; 0x01
     56c:	68 83       	st	Y, r22
     56e:	d6 01       	movw	r26, r12
     570:	11 96       	adiw	r26, 0x01	; 1
     572:	7c 93       	st	X, r23
     574:	6e 93       	st	-X, r22
     576:	71 83       	std	Z+1, r23	; 0x01
     578:	60 83       	st	Z, r22
     57a:	1f c1       	rjmp	.+574    	; 0x7ba <genarate_T+0x414>
     57c:	80 91 8c 00 	lds	r24, 0x008C
     580:	90 91 8d 00 	lds	r25, 0x008D
     584:	64 e0       	ldi	r22, 0x04	; 4
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     58c:	02 97       	sbiw	r24, 0x02	; 2
     58e:	09 f0       	breq	.+2      	; 0x592 <genarate_T+0x1ec>
     590:	89 c0       	rjmp	.+274    	; 0x6a4 <genarate_T+0x2fe>
		if (r > 15 || c < 2 || c > 7) return 0;
     592:	b0 e1       	ldi	r27, 0x10	; 16
     594:	eb 16       	cp	r14, r27
     596:	f1 04       	cpc	r15, r1
     598:	0c f0       	brlt	.+2      	; 0x59c <genarate_T+0x1f6>
     59a:	12 c1       	rjmp	.+548    	; 0x7c0 <genarate_T+0x41a>
     59c:	02 30       	cpi	r16, 0x02	; 2
     59e:	11 05       	cpc	r17, r1
     5a0:	0c f4       	brge	.+2      	; 0x5a4 <genarate_T+0x1fe>
     5a2:	0e c1       	rjmp	.+540    	; 0x7c0 <genarate_T+0x41a>
     5a4:	08 30       	cpi	r16, 0x08	; 8
     5a6:	11 05       	cpc	r17, r1
     5a8:	0c f0       	brlt	.+2      	; 0x5ac <genarate_T+0x206>
     5aa:	0a c1       	rjmp	.+532    	; 0x7c0 <genarate_T+0x41a>
		if (matrix[r][c] == 0 && matrix[r][c-1] == 0 &&
     5ac:	97 01       	movw	r18, r14
     5ae:	93 e0       	ldi	r25, 0x03	; 3
     5b0:	22 0f       	add	r18, r18
     5b2:	33 1f       	adc	r19, r19
     5b4:	9a 95       	dec	r25
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <genarate_T+0x20a>
     5b8:	2e 0d       	add	r18, r14
     5ba:	3f 1d       	adc	r19, r15
     5bc:	f9 01       	movw	r30, r18
     5be:	e0 0f       	add	r30, r16
     5c0:	f1 1f       	adc	r31, r17
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	e6 53       	subi	r30, 0x36	; 54
     5c8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ca:	80 81       	ld	r24, Z
     5cc:	91 81       	ldd	r25, Z+1	; 0x01
     5ce:	89 2b       	or	r24, r25
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <genarate_T+0x22e>
     5d2:	f6 c0       	rjmp	.+492    	; 0x7c0 <genarate_T+0x41a>
     5d4:	e8 01       	movw	r28, r16
     5d6:	21 97       	sbiw	r28, 0x01	; 1
     5d8:	f9 01       	movw	r30, r18
     5da:	ec 0f       	add	r30, r28
     5dc:	fd 1f       	adc	r31, r29
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	e6 53       	subi	r30, 0x36	; 54
     5e4:	fe 4f       	sbci	r31, 0xFE	; 254
     5e6:	80 81       	ld	r24, Z
     5e8:	91 81       	ldd	r25, Z+1	; 0x01
     5ea:	89 2b       	or	r24, r25
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <genarate_T+0x24a>
     5ee:	e8 c0       	rjmp	.+464    	; 0x7c0 <genarate_T+0x41a>
     5f0:	a8 01       	movw	r20, r16
     5f2:	4f 5f       	subi	r20, 0xFF	; 255
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	f9 01       	movw	r30, r18
     5f8:	e4 0f       	add	r30, r20
     5fa:	f5 1f       	adc	r31, r21
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	e6 53       	subi	r30, 0x36	; 54
     602:	fe 4f       	sbci	r31, 0xFE	; 254
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	89 2b       	or	r24, r25
     60a:	09 f0       	breq	.+2      	; 0x60e <genarate_T+0x268>
     60c:	d9 c0       	rjmp	.+434    	; 0x7c0 <genarate_T+0x41a>
     60e:	97 01       	movw	r18, r14
     610:	2f 5f       	subi	r18, 0xFF	; 255
     612:	3f 4f       	sbci	r19, 0xFF	; 255
     614:	f9 01       	movw	r30, r18
     616:	73 e0       	ldi	r23, 0x03	; 3
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	7a 95       	dec	r23
     61e:	e1 f7       	brne	.-8      	; 0x618 <genarate_T+0x272>
     620:	e2 0f       	add	r30, r18
     622:	f3 1f       	adc	r31, r19
     624:	e0 0f       	add	r30, r16
     626:	f1 1f       	adc	r31, r17
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	e6 53       	subi	r30, 0x36	; 54
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	80 81       	ld	r24, Z
     632:	91 81       	ldd	r25, Z+1	; 0x01
     634:	89 2b       	or	r24, r25
     636:	09 f0       	breq	.+2      	; 0x63a <genarate_T+0x294>
     638:	c3 c0       	rjmp	.+390    	; 0x7c0 <genarate_T+0x41a>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     63a:	d7 01       	movw	r26, r14
     63c:	93 e0       	ldi	r25, 0x03	; 3
     63e:	aa 0f       	add	r26, r26
     640:	bb 1f       	adc	r27, r27
     642:	9a 95       	dec	r25
     644:	e1 f7       	brne	.-8      	; 0x63e <genarate_T+0x298>
     646:	ae 0d       	add	r26, r14
     648:	bf 1d       	adc	r27, r15
     64a:	fd 01       	movw	r30, r26
     64c:	e0 0f       	add	r30, r16
     64e:	f1 1f       	adc	r31, r17
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	e6 53       	subi	r30, 0x36	; 54
     656:	fe 4f       	sbci	r31, 0xFE	; 254
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	91 83       	std	Z+1, r25	; 0x01
     65e:	80 83       	st	Z, r24
			OnLedMatrix(r,c+1);
			OnLedMatrix(r+1,c);
			return 1;
		}
	}
	else if (RotateBlock  % 4 == 3){
     660:	ca 0f       	add	r28, r26
     662:	db 1f       	adc	r29, r27
     664:	cc 0f       	add	r28, r28
     666:	dd 1f       	adc	r29, r29
     668:	c6 53       	subi	r28, 0x36	; 54
     66a:	de 4f       	sbci	r29, 0xFE	; 254
     66c:	99 83       	std	Y+1, r25	; 0x01
     66e:	88 83       	st	Y, r24
     670:	a4 0f       	add	r26, r20
     672:	b5 1f       	adc	r27, r21
     674:	aa 0f       	add	r26, r26
     676:	bb 1f       	adc	r27, r27
     678:	a6 53       	subi	r26, 0x36	; 54
     67a:	be 4f       	sbci	r27, 0xFE	; 254
     67c:	11 96       	adiw	r26, 0x01	; 1
     67e:	9c 93       	st	X, r25
     680:	8e 93       	st	-X, r24
     682:	f9 01       	movw	r30, r18
     684:	63 e0       	ldi	r22, 0x03	; 3
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	6a 95       	dec	r22
     68c:	e1 f7       	brne	.-8      	; 0x686 <genarate_T+0x2e0>
     68e:	e2 0f       	add	r30, r18
     690:	f3 1f       	adc	r31, r19
     692:	e0 0f       	add	r30, r16
     694:	f1 1f       	adc	r31, r17
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	e6 53       	subi	r30, 0x36	; 54
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	91 83       	std	Z+1, r25	; 0x01
     6a0:	80 83       	st	Z, r24
     6a2:	8b c0       	rjmp	.+278    	; 0x7ba <genarate_T+0x414>
     6a4:	80 91 8c 00 	lds	r24, 0x008C
     6a8:	90 91 8d 00 	lds	r25, 0x008D
     6ac:	64 e0       	ldi	r22, 0x04	; 4
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     6b4:	03 97       	sbiw	r24, 0x03	; 3
     6b6:	09 f0       	breq	.+2      	; 0x6ba <genarate_T+0x314>
     6b8:	83 c0       	rjmp	.+262    	; 0x7c0 <genarate_T+0x41a>
		if (r > 15 || c < 2 || c > 8) return 0;
     6ba:	e0 e1       	ldi	r30, 0x10	; 16
     6bc:	ee 16       	cp	r14, r30
     6be:	f1 04       	cpc	r15, r1
     6c0:	0c f0       	brlt	.+2      	; 0x6c4 <genarate_T+0x31e>
     6c2:	7e c0       	rjmp	.+252    	; 0x7c0 <genarate_T+0x41a>
     6c4:	02 30       	cpi	r16, 0x02	; 2
     6c6:	11 05       	cpc	r17, r1
     6c8:	0c f4       	brge	.+2      	; 0x6cc <genarate_T+0x326>
     6ca:	7a c0       	rjmp	.+244    	; 0x7c0 <genarate_T+0x41a>
     6cc:	09 30       	cpi	r16, 0x09	; 9
     6ce:	11 05       	cpc	r17, r1
     6d0:	0c f0       	brlt	.+2      	; 0x6d4 <genarate_T+0x32e>
     6d2:	76 c0       	rjmp	.+236    	; 0x7c0 <genarate_T+0x41a>
		if (matrix[r][c] == 0 && matrix[r-1][c] == 0 &&
     6d4:	97 01       	movw	r18, r14
     6d6:	43 e0       	ldi	r20, 0x03	; 3
     6d8:	22 0f       	add	r18, r18
     6da:	33 1f       	adc	r19, r19
     6dc:	4a 95       	dec	r20
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <genarate_T+0x332>
     6e0:	2e 0d       	add	r18, r14
     6e2:	3f 1d       	adc	r19, r15
     6e4:	f9 01       	movw	r30, r18
     6e6:	e0 0f       	add	r30, r16
     6e8:	f1 1f       	adc	r31, r17
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	e6 53       	subi	r30, 0x36	; 54
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	89 2b       	or	r24, r25
     6f8:	09 f0       	breq	.+2      	; 0x6fc <genarate_T+0x356>
     6fa:	62 c0       	rjmp	.+196    	; 0x7c0 <genarate_T+0x41a>
     6fc:	a7 01       	movw	r20, r14
     6fe:	41 50       	subi	r20, 0x01	; 1
     700:	50 40       	sbci	r21, 0x00	; 0
     702:	fa 01       	movw	r30, r20
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	ee 0f       	add	r30, r30
     708:	ff 1f       	adc	r31, r31
     70a:	8a 95       	dec	r24
     70c:	e1 f7       	brne	.-8      	; 0x706 <genarate_T+0x360>
     70e:	e4 0f       	add	r30, r20
     710:	f5 1f       	adc	r31, r21
     712:	e0 0f       	add	r30, r16
     714:	f1 1f       	adc	r31, r17
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e6 53       	subi	r30, 0x36	; 54
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	89 2b       	or	r24, r25
     724:	09 f0       	breq	.+2      	; 0x728 <genarate_T+0x382>
     726:	4c c0       	rjmp	.+152    	; 0x7c0 <genarate_T+0x41a>
     728:	b8 01       	movw	r22, r16
     72a:	61 50       	subi	r22, 0x01	; 1
     72c:	70 40       	sbci	r23, 0x00	; 0
     72e:	f9 01       	movw	r30, r18
     730:	e6 0f       	add	r30, r22
     732:	f7 1f       	adc	r31, r23
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	e6 53       	subi	r30, 0x36	; 54
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	80 81       	ld	r24, Z
     73e:	91 81       	ldd	r25, Z+1	; 0x01
     740:	89 2b       	or	r24, r25
     742:	f1 f5       	brne	.+124    	; 0x7c0 <genarate_T+0x41a>
     744:	c7 01       	movw	r24, r14
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	ec 01       	movw	r28, r24
     74a:	f3 e0       	ldi	r31, 0x03	; 3
     74c:	cc 0f       	add	r28, r28
     74e:	dd 1f       	adc	r29, r29
     750:	fa 95       	dec	r31
     752:	e1 f7       	brne	.-8      	; 0x74c <genarate_T+0x3a6>
     754:	c8 0f       	add	r28, r24
     756:	d9 1f       	adc	r29, r25
     758:	c0 0f       	add	r28, r16
     75a:	d1 1f       	adc	r29, r17
     75c:	cc 0f       	add	r28, r28
     75e:	dd 1f       	adc	r29, r29
     760:	c6 53       	subi	r28, 0x36	; 54
     762:	de 4f       	sbci	r29, 0xFE	; 254
     764:	88 81       	ld	r24, Y
     766:	99 81       	ldd	r25, Y+1	; 0x01
     768:	89 2b       	or	r24, r25
     76a:	51 f5       	brne	.+84     	; 0x7c0 <genarate_T+0x41a>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     76c:	d9 01       	movw	r26, r18
     76e:	f9 01       	movw	r30, r18
     770:	e0 0f       	add	r30, r16
     772:	f1 1f       	adc	r31, r17
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	e6 53       	subi	r30, 0x36	; 54
     77a:	fe 4f       	sbci	r31, 0xFE	; 254
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	91 83       	std	Z+1, r25	; 0x01
     782:	80 83       	st	Z, r24
		matrix[r][c-1] == 0 && matrix[r+1][c] == 0){
			OnLedMatrix(r,c);
			OnLedMatrix(r-1,c);
			OnLedMatrix(r,c-1);
			OnLedMatrix(r+1,c);
			return 1;
     784:	fa 01       	movw	r30, r20
     786:	23 e0       	ldi	r18, 0x03	; 3
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	2a 95       	dec	r18
     78e:	e1 f7       	brne	.-8      	; 0x788 <genarate_T+0x3e2>
     790:	e4 0f       	add	r30, r20
     792:	f5 1f       	adc	r31, r21
     794:	e0 0f       	add	r30, r16
     796:	f1 1f       	adc	r31, r17
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	e6 53       	subi	r30, 0x36	; 54
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	91 83       	std	Z+1, r25	; 0x01
     7a2:	80 83       	st	Z, r24
     7a4:	a6 0f       	add	r26, r22
     7a6:	b7 1f       	adc	r27, r23
     7a8:	aa 0f       	add	r26, r26
     7aa:	bb 1f       	adc	r27, r27
     7ac:	a6 53       	subi	r26, 0x36	; 54
     7ae:	be 4f       	sbci	r27, 0xFE	; 254
     7b0:	11 96       	adiw	r26, 0x01	; 1
     7b2:	9c 93       	st	X, r25
     7b4:	8e 93       	st	-X, r24
     7b6:	99 83       	std	Y+1, r25	; 0x01
     7b8:	88 83       	st	Y, r24
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <genarate_T+0x41e>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	return 0;
}
     7c4:	c9 01       	movw	r24, r18
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	08 95       	ret

000007d8 <genarate_L>:

//L

int genarate_L(int r, int c){
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	7c 01       	movw	r14, r24
     7ea:	8b 01       	movw	r16, r22
	if (RotateBlock  % 4 == 0) {
     7ec:	80 91 8c 00 	lds	r24, 0x008C
     7f0:	90 91 8d 00 	lds	r25, 0x008D
     7f4:	83 70       	andi	r24, 0x03	; 3
     7f6:	90 70       	andi	r25, 0x00	; 0
     7f8:	89 2b       	or	r24, r25
     7fa:	09 f0       	breq	.+2      	; 0x7fe <genarate_L+0x26>
     7fc:	64 c0       	rjmp	.+200    	; 0x8c6 <__stack+0x67>
		if (r > 16 || c < 1 || c > 7) return 0;
     7fe:	81 e1       	ldi	r24, 0x11	; 17
     800:	e8 16       	cp	r14, r24
     802:	f1 04       	cpc	r15, r1
     804:	0c f0       	brlt	.+2      	; 0x808 <genarate_L+0x30>
     806:	f5 c1       	rjmp	.+1002   	; 0xbf2 <__stack+0x393>
     808:	16 16       	cp	r1, r22
     80a:	17 06       	cpc	r1, r23
     80c:	0c f0       	brlt	.+2      	; 0x810 <genarate_L+0x38>
     80e:	f1 c1       	rjmp	.+994    	; 0xbf2 <__stack+0x393>
     810:	68 30       	cpi	r22, 0x08	; 8
     812:	71 05       	cpc	r23, r1
     814:	0c f0       	brlt	.+2      	; 0x818 <genarate_L+0x40>
     816:	ed c1       	rjmp	.+986    	; 0xbf2 <__stack+0x393>
		if (matrix[r][c] == 0 && matrix[r][c+1] == 0 &&
     818:	97 01       	movw	r18, r14
     81a:	73 e0       	ldi	r23, 0x03	; 3
     81c:	22 0f       	add	r18, r18
     81e:	33 1f       	adc	r19, r19
     820:	7a 95       	dec	r23
     822:	e1 f7       	brne	.-8      	; 0x81c <genarate_L+0x44>
     824:	2e 0d       	add	r18, r14
     826:	3f 1d       	adc	r19, r15
     828:	a9 01       	movw	r20, r18
     82a:	40 0f       	add	r20, r16
     82c:	51 1f       	adc	r21, r17
     82e:	44 0f       	add	r20, r20
     830:	55 1f       	adc	r21, r21
     832:	46 53       	subi	r20, 0x36	; 54
     834:	5e 4f       	sbci	r21, 0xFE	; 254
     836:	ea 01       	movw	r28, r20
     838:	88 81       	ld	r24, Y
     83a:	99 81       	ldd	r25, Y+1	; 0x01
     83c:	89 2b       	or	r24, r25
     83e:	09 f0       	breq	.+2      	; 0x842 <genarate_L+0x6a>
     840:	d8 c1       	rjmp	.+944    	; 0xbf2 <__stack+0x393>
     842:	b8 01       	movw	r22, r16
     844:	6f 5f       	subi	r22, 0xFF	; 255
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	62 0f       	add	r22, r18
     84a:	73 1f       	adc	r23, r19
     84c:	66 0f       	add	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	66 53       	subi	r22, 0x36	; 54
     852:	7e 4f       	sbci	r23, 0xFE	; 254
     854:	fb 01       	movw	r30, r22
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	89 2b       	or	r24, r25
     85c:	09 f0       	breq	.+2      	; 0x860 <__stack+0x1>
     85e:	c9 c1       	rjmp	.+914    	; 0xbf2 <__stack+0x393>
     860:	c7 01       	movw	r24, r14
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	fc 01       	movw	r30, r24
     866:	43 e0       	ldi	r20, 0x03	; 3
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	4a 95       	dec	r20
     86e:	e1 f7       	brne	.-8      	; 0x868 <__stack+0x9>
     870:	e8 0f       	add	r30, r24
     872:	f9 1f       	adc	r31, r25
     874:	e0 0f       	add	r30, r16
     876:	f1 1f       	adc	r31, r17
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	e6 53       	subi	r30, 0x36	; 54
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	80 81       	ld	r24, Z
     882:	91 81       	ldd	r25, Z+1	; 0x01
     884:	89 2b       	or	r24, r25
     886:	09 f0       	breq	.+2      	; 0x88a <__stack+0x2b>
     888:	b4 c1       	rjmp	.+872    	; 0xbf2 <__stack+0x393>
     88a:	c7 01       	movw	r24, r14
     88c:	02 97       	sbiw	r24, 0x02	; 2
     88e:	dc 01       	movw	r26, r24
     890:	23 e0       	ldi	r18, 0x03	; 3
     892:	aa 0f       	add	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	e1 f7       	brne	.-8      	; 0x892 <__stack+0x33>
     89a:	a8 0f       	add	r26, r24
     89c:	b9 1f       	adc	r27, r25
     89e:	a0 0f       	add	r26, r16
     8a0:	b1 1f       	adc	r27, r17
     8a2:	aa 0f       	add	r26, r26
     8a4:	bb 1f       	adc	r27, r27
     8a6:	a6 53       	subi	r26, 0x36	; 54
     8a8:	be 4f       	sbci	r27, 0xFE	; 254
     8aa:	8d 91       	ld	r24, X+
     8ac:	9c 91       	ld	r25, X
     8ae:	11 97       	sbiw	r26, 0x01	; 1
     8b0:	89 2b       	or	r24, r25
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	9e c1       	rjmp	.+828    	; 0xbf2 <__stack+0x393>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	99 83       	std	Y+1, r25	; 0x01
     8bc:	88 83       	st	Y, r24
			OnLedMatrix(r-1,c);
			OnLedMatrix(r-2,c);
			return 1;
		}
	}
	else if (RotateBlock  % 4 == 1) {
     8be:	eb 01       	movw	r28, r22
     8c0:	99 83       	std	Y+1, r25	; 0x01
     8c2:	88 83       	st	Y, r24
     8c4:	8e c1       	rjmp	.+796    	; 0xbe2 <__stack+0x383>
     8c6:	80 91 8c 00 	lds	r24, 0x008C
     8ca:	90 91 8d 00 	lds	r25, 0x008D
     8ce:	64 e0       	ldi	r22, 0x04	; 4
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     8d6:	bc 01       	movw	r22, r24
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	91 05       	cpc	r25, r1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <__stack+0x81>
     8de:	64 c0       	rjmp	.+200    	; 0x9a8 <__stack+0x149>
		if (r > 15 || c < 1 || c > 6) return 0;
     8e0:	e0 e1       	ldi	r30, 0x10	; 16
     8e2:	ee 16       	cp	r14, r30
     8e4:	f1 04       	cpc	r15, r1
     8e6:	0c f0       	brlt	.+2      	; 0x8ea <__stack+0x8b>
     8e8:	84 c1       	rjmp	.+776    	; 0xbf2 <__stack+0x393>
     8ea:	10 16       	cp	r1, r16
     8ec:	11 06       	cpc	r1, r17
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <__stack+0x93>
     8f0:	80 c1       	rjmp	.+768    	; 0xbf2 <__stack+0x393>
     8f2:	07 30       	cpi	r16, 0x07	; 7
     8f4:	11 05       	cpc	r17, r1
     8f6:	0c f0       	brlt	.+2      	; 0x8fa <__stack+0x9b>
     8f8:	7c c1       	rjmp	.+760    	; 0xbf2 <__stack+0x393>
		if (matrix[r][c] == 0 && matrix[r][c+1] == 0 &&
     8fa:	97 01       	movw	r18, r14
     8fc:	43 e0       	ldi	r20, 0x03	; 3
     8fe:	22 0f       	add	r18, r18
     900:	33 1f       	adc	r19, r19
     902:	4a 95       	dec	r20
     904:	e1 f7       	brne	.-8      	; 0x8fe <__stack+0x9f>
     906:	2e 0d       	add	r18, r14
     908:	3f 1d       	adc	r19, r15
     90a:	a9 01       	movw	r20, r18
     90c:	40 0f       	add	r20, r16
     90e:	51 1f       	adc	r21, r17
     910:	44 0f       	add	r20, r20
     912:	55 1f       	adc	r21, r21
     914:	46 53       	subi	r20, 0x36	; 54
     916:	5e 4f       	sbci	r21, 0xFE	; 254
     918:	ea 01       	movw	r28, r20
     91a:	88 81       	ld	r24, Y
     91c:	99 81       	ldd	r25, Y+1	; 0x01
     91e:	89 2b       	or	r24, r25
     920:	09 f0       	breq	.+2      	; 0x924 <__stack+0xc5>
     922:	67 c1       	rjmp	.+718    	; 0xbf2 <__stack+0x393>
     924:	e8 01       	movw	r28, r16
     926:	21 96       	adiw	r28, 0x01	; 1
     928:	c2 0f       	add	r28, r18
     92a:	d3 1f       	adc	r29, r19
     92c:	cc 0f       	add	r28, r28
     92e:	dd 1f       	adc	r29, r29
     930:	c6 53       	subi	r28, 0x36	; 54
     932:	de 4f       	sbci	r29, 0xFE	; 254
     934:	88 81       	ld	r24, Y
     936:	99 81       	ldd	r25, Y+1	; 0x01
     938:	89 2b       	or	r24, r25
     93a:	09 f0       	breq	.+2      	; 0x93e <__stack+0xdf>
     93c:	5a c1       	rjmp	.+692    	; 0xbf2 <__stack+0x393>
     93e:	b2 e0       	ldi	r27, 0x02	; 2
     940:	cb 2e       	mov	r12, r27
     942:	d1 2c       	mov	r13, r1
     944:	c0 0e       	add	r12, r16
     946:	d1 1e       	adc	r13, r17
     948:	c2 0e       	add	r12, r18
     94a:	d3 1e       	adc	r13, r19
     94c:	cc 0c       	add	r12, r12
     94e:	dd 1c       	adc	r13, r13
     950:	ea ec       	ldi	r30, 0xCA	; 202
     952:	f1 e0       	ldi	r31, 0x01	; 1
     954:	ce 0e       	add	r12, r30
     956:	df 1e       	adc	r13, r31
     958:	f6 01       	movw	r30, r12
     95a:	80 81       	ld	r24, Z
     95c:	91 81       	ldd	r25, Z+1	; 0x01
     95e:	89 2b       	or	r24, r25
     960:	09 f0       	breq	.+2      	; 0x964 <__stack+0x105>
     962:	47 c1       	rjmp	.+654    	; 0xbf2 <__stack+0x393>
     964:	c7 01       	movw	r24, r14
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	dc 01       	movw	r26, r24
     96a:	f3 e0       	ldi	r31, 0x03	; 3
     96c:	aa 0f       	add	r26, r26
     96e:	bb 1f       	adc	r27, r27
     970:	fa 95       	dec	r31
     972:	e1 f7       	brne	.-8      	; 0x96c <__stack+0x10d>
     974:	a8 0f       	add	r26, r24
     976:	b9 1f       	adc	r27, r25
     978:	a0 0f       	add	r26, r16
     97a:	b1 1f       	adc	r27, r17
     97c:	aa 0f       	add	r26, r26
     97e:	bb 1f       	adc	r27, r27
     980:	a6 53       	subi	r26, 0x36	; 54
     982:	be 4f       	sbci	r27, 0xFE	; 254
     984:	8d 91       	ld	r24, X+
     986:	9c 91       	ld	r25, X
     988:	11 97       	sbiw	r26, 0x01	; 1
     98a:	89 2b       	or	r24, r25
     98c:	09 f0       	breq	.+2      	; 0x990 <__stack+0x131>
     98e:	31 c1       	rjmp	.+610    	; 0xbf2 <__stack+0x393>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     990:	fa 01       	movw	r30, r20
     992:	71 83       	std	Z+1, r23	; 0x01
     994:	60 83       	st	Z, r22
			OnLedMatrix(r,c+2);
			OnLedMatrix(r+1,c);
			return 1;
		}
	}
	else if (RotateBlock  % 4 == 2) {
     996:	79 83       	std	Y+1, r23	; 0x01
     998:	68 83       	st	Y, r22
     99a:	e6 01       	movw	r28, r12
     99c:	79 83       	std	Y+1, r23	; 0x01
     99e:	68 83       	st	Y, r22
     9a0:	11 96       	adiw	r26, 0x01	; 1
     9a2:	7c 93       	st	X, r23
     9a4:	6e 93       	st	-X, r22
     9a6:	22 c1       	rjmp	.+580    	; 0xbec <__stack+0x38d>
     9a8:	80 91 8c 00 	lds	r24, 0x008C
     9ac:	90 91 8d 00 	lds	r25, 0x008D
     9b0:	64 e0       	ldi	r22, 0x04	; 4
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     9b8:	02 97       	sbiw	r24, 0x02	; 2
     9ba:	09 f0       	breq	.+2      	; 0x9be <__stack+0x15f>
     9bc:	99 c0       	rjmp	.+306    	; 0xaf0 <__stack+0x291>
		if (r > 14 || c < 2 || c > 8) return 0;
     9be:	ef e0       	ldi	r30, 0x0F	; 15
     9c0:	ee 16       	cp	r14, r30
     9c2:	f1 04       	cpc	r15, r1
     9c4:	0c f0       	brlt	.+2      	; 0x9c8 <__stack+0x169>
     9c6:	15 c1       	rjmp	.+554    	; 0xbf2 <__stack+0x393>
     9c8:	02 30       	cpi	r16, 0x02	; 2
     9ca:	11 05       	cpc	r17, r1
     9cc:	0c f4       	brge	.+2      	; 0x9d0 <__stack+0x171>
     9ce:	11 c1       	rjmp	.+546    	; 0xbf2 <__stack+0x393>
     9d0:	09 30       	cpi	r16, 0x09	; 9
     9d2:	11 05       	cpc	r17, r1
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__stack+0x179>
     9d6:	0d c1       	rjmp	.+538    	; 0xbf2 <__stack+0x393>
		if (matrix[r][c] == 0 && matrix[r][c-1] == 0 &&
     9d8:	97 01       	movw	r18, r14
     9da:	53 e0       	ldi	r21, 0x03	; 3
     9dc:	22 0f       	add	r18, r18
     9de:	33 1f       	adc	r19, r19
     9e0:	5a 95       	dec	r21
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <__stack+0x17d>
     9e4:	2e 0d       	add	r18, r14
     9e6:	3f 1d       	adc	r19, r15
     9e8:	f9 01       	movw	r30, r18
     9ea:	e0 0f       	add	r30, r16
     9ec:	f1 1f       	adc	r31, r17
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	e6 53       	subi	r30, 0x36	; 54
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	80 81       	ld	r24, Z
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	89 2b       	or	r24, r25
     9fc:	09 f0       	breq	.+2      	; 0xa00 <__stack+0x1a1>
     9fe:	f9 c0       	rjmp	.+498    	; 0xbf2 <__stack+0x393>
     a00:	b8 01       	movw	r22, r16
     a02:	61 50       	subi	r22, 0x01	; 1
     a04:	70 40       	sbci	r23, 0x00	; 0
     a06:	f9 01       	movw	r30, r18
     a08:	e6 0f       	add	r30, r22
     a0a:	f7 1f       	adc	r31, r23
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	e6 53       	subi	r30, 0x36	; 54
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	80 81       	ld	r24, Z
     a16:	91 81       	ldd	r25, Z+1	; 0x01
     a18:	89 2b       	or	r24, r25
     a1a:	09 f0       	breq	.+2      	; 0xa1e <__stack+0x1bf>
     a1c:	ea c0       	rjmp	.+468    	; 0xbf2 <__stack+0x393>
     a1e:	a7 01       	movw	r20, r14
     a20:	4f 5f       	subi	r20, 0xFF	; 255
     a22:	5f 4f       	sbci	r21, 0xFF	; 255
     a24:	fa 01       	movw	r30, r20
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	9a 95       	dec	r25
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <__stack+0x1c9>
     a30:	e4 0f       	add	r30, r20
     a32:	f5 1f       	adc	r31, r21
     a34:	e0 0f       	add	r30, r16
     a36:	f1 1f       	adc	r31, r17
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	e6 53       	subi	r30, 0x36	; 54
     a3e:	fe 4f       	sbci	r31, 0xFE	; 254
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	89 2b       	or	r24, r25
     a46:	09 f0       	breq	.+2      	; 0xa4a <__stack+0x1eb>
     a48:	d4 c0       	rjmp	.+424    	; 0xbf2 <__stack+0x393>
     a4a:	97 01       	movw	r18, r14
     a4c:	2e 5f       	subi	r18, 0xFE	; 254
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	f9 01       	movw	r30, r18
     a52:	b3 e0       	ldi	r27, 0x03	; 3
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	ba 95       	dec	r27
     a5a:	e1 f7       	brne	.-8      	; 0xa54 <__stack+0x1f5>
     a5c:	e2 0f       	add	r30, r18
     a5e:	f3 1f       	adc	r31, r19
     a60:	e0 0f       	add	r30, r16
     a62:	f1 1f       	adc	r31, r17
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	e6 53       	subi	r30, 0x36	; 54
     a6a:	fe 4f       	sbci	r31, 0xFE	; 254
     a6c:	80 81       	ld	r24, Z
     a6e:	91 81       	ldd	r25, Z+1	; 0x01
     a70:	89 2b       	or	r24, r25
     a72:	09 f0       	breq	.+2      	; 0xa76 <__stack+0x217>
     a74:	be c0       	rjmp	.+380    	; 0xbf2 <__stack+0x393>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     a76:	f7 01       	movw	r30, r14
     a78:	93 e0       	ldi	r25, 0x03	; 3
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	9a 95       	dec	r25
     a80:	e1 f7       	brne	.-8      	; 0xa7a <__stack+0x21b>
     a82:	ee 0d       	add	r30, r14
     a84:	ff 1d       	adc	r31, r15
     a86:	df 01       	movw	r26, r30
     a88:	a0 0f       	add	r26, r16
     a8a:	b1 1f       	adc	r27, r17
     a8c:	aa 0f       	add	r26, r26
     a8e:	bb 1f       	adc	r27, r27
     a90:	a6 53       	subi	r26, 0x36	; 54
     a92:	be 4f       	sbci	r27, 0xFE	; 254
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	11 96       	adiw	r26, 0x01	; 1
     a9a:	9c 93       	st	X, r25
     a9c:	8e 93       	st	-X, r24
			OnLedMatrix(r+1,c);
			OnLedMatrix(r+2,c);
			return 1;
		}
	}
	else if (RotateBlock  % 4 == 3) {
     a9e:	e6 0f       	add	r30, r22
     aa0:	f7 1f       	adc	r31, r23
     aa2:	ee 0f       	add	r30, r30
     aa4:	ff 1f       	adc	r31, r31
     aa6:	e6 53       	subi	r30, 0x36	; 54
     aa8:	fe 4f       	sbci	r31, 0xFE	; 254
     aaa:	91 83       	std	Z+1, r25	; 0x01
     aac:	80 83       	st	Z, r24
     aae:	fa 01       	movw	r30, r20
     ab0:	63 e0       	ldi	r22, 0x03	; 3
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	6a 95       	dec	r22
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <__stack+0x253>
     aba:	e4 0f       	add	r30, r20
     abc:	f5 1f       	adc	r31, r21
     abe:	e0 0f       	add	r30, r16
     ac0:	f1 1f       	adc	r31, r17
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	e6 53       	subi	r30, 0x36	; 54
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	91 83       	std	Z+1, r25	; 0x01
     acc:	80 83       	st	Z, r24
     ace:	f9 01       	movw	r30, r18
     ad0:	43 e0       	ldi	r20, 0x03	; 3
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	4a 95       	dec	r20
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <__stack+0x273>
     ada:	e2 0f       	add	r30, r18
     adc:	f3 1f       	adc	r31, r19
     ade:	e0 0f       	add	r30, r16
     ae0:	f1 1f       	adc	r31, r17
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	e6 53       	subi	r30, 0x36	; 54
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	91 83       	std	Z+1, r25	; 0x01
     aec:	80 83       	st	Z, r24
     aee:	7e c0       	rjmp	.+252    	; 0xbec <__stack+0x38d>
     af0:	80 91 8c 00 	lds	r24, 0x008C
     af4:	90 91 8d 00 	lds	r25, 0x008D
     af8:	64 e0       	ldi	r22, 0x04	; 4
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     b00:	03 97       	sbiw	r24, 0x03	; 3
     b02:	09 f0       	breq	.+2      	; 0xb06 <__stack+0x2a7>
     b04:	76 c0       	rjmp	.+236    	; 0xbf2 <__stack+0x393>
		if (r > 16 || c < 3 || c > 8) return 0;
     b06:	f1 e1       	ldi	r31, 0x11	; 17
     b08:	ef 16       	cp	r14, r31
     b0a:	f1 04       	cpc	r15, r1
     b0c:	0c f0       	brlt	.+2      	; 0xb10 <__stack+0x2b1>
     b0e:	71 c0       	rjmp	.+226    	; 0xbf2 <__stack+0x393>
     b10:	03 30       	cpi	r16, 0x03	; 3
     b12:	11 05       	cpc	r17, r1
     b14:	0c f4       	brge	.+2      	; 0xb18 <__stack+0x2b9>
     b16:	6d c0       	rjmp	.+218    	; 0xbf2 <__stack+0x393>
     b18:	09 30       	cpi	r16, 0x09	; 9
     b1a:	11 05       	cpc	r17, r1
     b1c:	0c f0       	brlt	.+2      	; 0xb20 <__stack+0x2c1>
     b1e:	69 c0       	rjmp	.+210    	; 0xbf2 <__stack+0x393>
		if (matrix[r][c] == 0 && matrix[r][c-1] == 0 &&
     b20:	97 01       	movw	r18, r14
     b22:	93 e0       	ldi	r25, 0x03	; 3
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	9a 95       	dec	r25
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <__stack+0x2c5>
     b2c:	2e 0d       	add	r18, r14
     b2e:	3f 1d       	adc	r19, r15
     b30:	f9 01       	movw	r30, r18
     b32:	e0 0f       	add	r30, r16
     b34:	f1 1f       	adc	r31, r17
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	e6 53       	subi	r30, 0x36	; 54
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	89 2b       	or	r24, r25
     b44:	09 f0       	breq	.+2      	; 0xb48 <__stack+0x2e9>
     b46:	55 c0       	rjmp	.+170    	; 0xbf2 <__stack+0x393>
     b48:	b8 01       	movw	r22, r16
     b4a:	61 50       	subi	r22, 0x01	; 1
     b4c:	70 40       	sbci	r23, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	e6 0f       	add	r30, r22
     b52:	f7 1f       	adc	r31, r23
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	e6 53       	subi	r30, 0x36	; 54
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	80 81       	ld	r24, Z
     b5e:	91 81       	ldd	r25, Z+1	; 0x01
     b60:	89 2b       	or	r24, r25
     b62:	09 f0       	breq	.+2      	; 0xb66 <__stack+0x307>
     b64:	46 c0       	rjmp	.+140    	; 0xbf2 <__stack+0x393>
     b66:	a8 01       	movw	r20, r16
     b68:	42 50       	subi	r20, 0x02	; 2
     b6a:	50 40       	sbci	r21, 0x00	; 0
     b6c:	f9 01       	movw	r30, r18
     b6e:	e4 0f       	add	r30, r20
     b70:	f5 1f       	adc	r31, r21
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	e6 53       	subi	r30, 0x36	; 54
     b78:	fe 4f       	sbci	r31, 0xFE	; 254
     b7a:	80 81       	ld	r24, Z
     b7c:	91 81       	ldd	r25, Z+1	; 0x01
     b7e:	89 2b       	or	r24, r25
     b80:	c1 f5       	brne	.+112    	; 0xbf2 <__stack+0x393>
     b82:	c7 01       	movw	r24, r14
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	dc 01       	movw	r26, r24
     b88:	e3 e0       	ldi	r30, 0x03	; 3
     b8a:	aa 0f       	add	r26, r26
     b8c:	bb 1f       	adc	r27, r27
     b8e:	ea 95       	dec	r30
     b90:	e1 f7       	brne	.-8      	; 0xb8a <__stack+0x32b>
     b92:	a8 0f       	add	r26, r24
     b94:	b9 1f       	adc	r27, r25
     b96:	a0 0f       	add	r26, r16
     b98:	b1 1f       	adc	r27, r17
     b9a:	aa 0f       	add	r26, r26
     b9c:	bb 1f       	adc	r27, r27
     b9e:	a6 53       	subi	r26, 0x36	; 54
     ba0:	be 4f       	sbci	r27, 0xFE	; 254
     ba2:	8d 91       	ld	r24, X+
     ba4:	9c 91       	ld	r25, X
     ba6:	11 97       	sbiw	r26, 0x01	; 1
     ba8:	89 2b       	or	r24, r25
     baa:	19 f5       	brne	.+70     	; 0xbf2 <__stack+0x393>
int Start_game = 0;
int Continue_game = 0;
int getFinalScore = 0;

void OnLedMatrix(int r, int c){
	matrix[r][c] = 1;
     bac:	f9 01       	movw	r30, r18
     bae:	02 0f       	add	r16, r18
     bb0:	13 1f       	adc	r17, r19
     bb2:	00 0f       	add	r16, r16
     bb4:	11 1f       	adc	r17, r17
     bb6:	06 53       	subi	r16, 0x36	; 54
     bb8:	1e 4f       	sbci	r17, 0xFE	; 254
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	e8 01       	movw	r28, r16
     bc0:	99 83       	std	Y+1, r25	; 0x01
     bc2:	88 83       	st	Y, r24
		matrix[r][c-2] == 0 && matrix[r-1][c] == 0){
			OnLedMatrix(r,c);
			OnLedMatrix(r,c-1);
			OnLedMatrix(r,c-2);
			OnLedMatrix(r-1,c);
			return 1;
     bc4:	62 0f       	add	r22, r18
     bc6:	73 1f       	adc	r23, r19
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	66 53       	subi	r22, 0x36	; 54
     bce:	7e 4f       	sbci	r23, 0xFE	; 254
     bd0:	eb 01       	movw	r28, r22
     bd2:	99 83       	std	Y+1, r25	; 0x01
     bd4:	88 83       	st	Y, r24
     bd6:	e4 0f       	add	r30, r20
     bd8:	f5 1f       	adc	r31, r21
     bda:	ee 0f       	add	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	e6 53       	subi	r30, 0x36	; 54
     be0:	fe 4f       	sbci	r31, 0xFE	; 254
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	80 83       	st	Z, r24
     be6:	11 96       	adiw	r26, 0x01	; 1
     be8:	9c 93       	st	X, r25
     bea:	8e 93       	st	-X, r24
     bec:	21 e0       	ldi	r18, 0x01	; 1
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <__stack+0x397>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	return 0;
}
     bf6:	c9 01       	movw	r24, r18
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	08 95       	ret

00000c0a <getBlock>:

int getBlock(int r, int c, int BlockType){
	if (BlockType == 1){
     c0a:	41 30       	cpi	r20, 0x01	; 1
     c0c:	51 05       	cpc	r21, r1
     c0e:	19 f4       	brne	.+6      	; 0xc16 <getBlock+0xc>
		 return genarate_T(r,c);
     c10:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <genarate_T>
     c14:	08 95       	ret
	}
	else if (BlockType == 2){
     c16:	42 30       	cpi	r20, 0x02	; 2
     c18:	51 05       	cpc	r21, r1
     c1a:	19 f4       	brne	.+6      	; 0xc22 <getBlock+0x18>
		 return genarate_Line(r,c);
     c1c:	0e 94 ae 00 	call	0x15c	; 0x15c <genarate_Line>
     c20:	08 95       	ret
	}
	else if (BlockType == 3){
     c22:	43 30       	cpi	r20, 0x03	; 3
     c24:	51 05       	cpc	r21, r1
     c26:	19 f4       	brne	.+6      	; 0xc2e <getBlock+0x24>
		 return genarate_Box(r,c);
     c28:	0e 94 65 01 	call	0x2ca	; 0x2ca <genarate_Box>
     c2c:	08 95       	ret
	}
	else if (BlockType == 4){
     c2e:	44 30       	cpi	r20, 0x04	; 4
     c30:	51 05       	cpc	r21, r1
     c32:	19 f4       	brne	.+6      	; 0xc3a <getBlock+0x30>
		 return genarate_L(r,c);
     c34:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <genarate_L>
     c38:	08 95       	ret
	}
}
     c3a:	08 95       	ret

00000c3c <Cancel_BlockType>:

void Cancel_BlockType(int r, int c, int BlockType){
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	8c 01       	movw	r16, r24
     c46:	eb 01       	movw	r28, r22
		
//T
	if (BlockType == 1) {
     c48:	41 30       	cpi	r20, 0x01	; 1
     c4a:	51 05       	cpc	r21, r1
     c4c:	09 f0       	breq	.+2      	; 0xc50 <Cancel_BlockType+0x14>
     c4e:	ad c0       	rjmp	.+346    	; 0xdaa <Cancel_BlockType+0x16e>
		if (RotateBlock  % 4 == 0){
     c50:	80 91 8c 00 	lds	r24, 0x008C
     c54:	90 91 8d 00 	lds	r25, 0x008D
     c58:	83 70       	andi	r24, 0x03	; 3
     c5a:	90 70       	andi	r25, 0x00	; 0
     c5c:	89 2b       	or	r24, r25
     c5e:	01 f5       	brne	.+64     	; 0xca0 <Cancel_BlockType+0x64>
			matrix[r][c]   = 0;
     c60:	d8 01       	movw	r26, r16
     c62:	73 e0       	ldi	r23, 0x03	; 3
     c64:	aa 0f       	add	r26, r26
     c66:	bb 1f       	adc	r27, r27
     c68:	7a 95       	dec	r23
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <Cancel_BlockType+0x28>
     c6c:	a0 0f       	add	r26, r16
     c6e:	b1 1f       	adc	r27, r17
     c70:	fd 01       	movw	r30, r26
     c72:	ec 0f       	add	r30, r28
     c74:	fd 1f       	adc	r31, r29
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	e6 53       	subi	r30, 0x36	; 54
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	11 82       	std	Z+1, r1	; 0x01
     c80:	10 82       	st	Z, r1
			matrix[r][c-1] = 0;
     c82:	fe 01       	movw	r30, r28
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	ea 0f       	add	r30, r26
     c88:	fb 1f       	adc	r31, r27
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	e6 53       	subi	r30, 0x36	; 54
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	11 82       	std	Z+1, r1	; 0x01
     c94:	10 82       	st	Z, r1
			matrix[r][c+1] = 0;
     c96:	21 96       	adiw	r28, 0x01	; 1
     c98:	ac 0f       	add	r26, r28
     c9a:	bd 1f       	adc	r27, r29
     c9c:	21 97       	sbiw	r28, 0x01	; 1
     c9e:	e5 c1       	rjmp	.+970    	; 0x106a <Cancel_BlockType+0x42e>
			matrix[r-1][c] = 0;
		}
		else if (RotateBlock  % 4 == 1){
     ca0:	80 91 8c 00 	lds	r24, 0x008C
     ca4:	90 91 8d 00 	lds	r25, 0x008D
     ca8:	64 e0       	ldi	r22, 0x04	; 4
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f4       	brne	.+60     	; 0xcf0 <Cancel_BlockType+0xb4>
			matrix[r][c]   = 0;
     cb4:	d8 01       	movw	r26, r16
     cb6:	43 e0       	ldi	r20, 0x03	; 3
     cb8:	aa 0f       	add	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	4a 95       	dec	r20
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <Cancel_BlockType+0x7c>
     cc0:	a0 0f       	add	r26, r16
     cc2:	b1 1f       	adc	r27, r17
     cc4:	fd 01       	movw	r30, r26
     cc6:	ec 0f       	add	r30, r28
     cc8:	fd 1f       	adc	r31, r29
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	e6 53       	subi	r30, 0x36	; 54
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	11 82       	std	Z+1, r1	; 0x01
     cd4:	10 82       	st	Z, r1
			matrix[r-1][c] = 0;
     cd6:	c8 01       	movw	r24, r16
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	fc 01       	movw	r30, r24
     cdc:	23 e0       	ldi	r18, 0x03	; 3
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	2a 95       	dec	r18
     ce4:	e1 f7       	brne	.-8      	; 0xcde <Cancel_BlockType+0xa2>
     ce6:	e8 0f       	add	r30, r24
     ce8:	f9 1f       	adc	r31, r25
     cea:	ec 0f       	add	r30, r28
     cec:	fd 1f       	adc	r31, r29
     cee:	1f c0       	rjmp	.+62     	; 0xd2e <Cancel_BlockType+0xf2>
			matrix[r][c+1] = 0;
			matrix[r+1][c] = 0;
		}
		else if (RotateBlock  % 4 == 2){
     cf0:	80 91 8c 00 	lds	r24, 0x008C
     cf4:	90 91 8d 00 	lds	r25, 0x008D
     cf8:	64 e0       	ldi	r22, 0x04	; 4
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     d00:	02 97       	sbiw	r24, 0x02	; 2
     d02:	01 f5       	brne	.+64     	; 0xd44 <Cancel_BlockType+0x108>
			matrix[r][c]   = 0;
     d04:	d8 01       	movw	r26, r16
     d06:	73 e0       	ldi	r23, 0x03	; 3
     d08:	aa 0f       	add	r26, r26
     d0a:	bb 1f       	adc	r27, r27
     d0c:	7a 95       	dec	r23
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <Cancel_BlockType+0xcc>
     d10:	a0 0f       	add	r26, r16
     d12:	b1 1f       	adc	r27, r17
     d14:	fd 01       	movw	r30, r26
     d16:	ec 0f       	add	r30, r28
     d18:	fd 1f       	adc	r31, r29
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	e6 53       	subi	r30, 0x36	; 54
     d20:	fe 4f       	sbci	r31, 0xFE	; 254
     d22:	11 82       	std	Z+1, r1	; 0x01
     d24:	10 82       	st	Z, r1
			matrix[r][c-1] = 0;
     d26:	fe 01       	movw	r30, r28
     d28:	31 97       	sbiw	r30, 0x01	; 1
     d2a:	ea 0f       	add	r30, r26
     d2c:	fb 1f       	adc	r31, r27
     d2e:	ee 0f       	add	r30, r30
     d30:	ff 1f       	adc	r31, r31
     d32:	e6 53       	subi	r30, 0x36	; 54
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	11 82       	std	Z+1, r1	; 0x01
     d38:	10 82       	st	Z, r1
			matrix[r][c+1] = 0;
     d3a:	21 96       	adiw	r28, 0x01	; 1
     d3c:	ac 0f       	add	r26, r28
     d3e:	bd 1f       	adc	r27, r29
     d40:	21 97       	sbiw	r28, 0x01	; 1
     d42:	25 c1       	rjmp	.+586    	; 0xf8e <Cancel_BlockType+0x352>
			matrix[r+1][c] = 0;
		}
		else if (RotateBlock  % 4 == 3){
     d44:	80 91 8c 00 	lds	r24, 0x008C
     d48:	90 91 8d 00 	lds	r25, 0x008D
     d4c:	64 e0       	ldi	r22, 0x04	; 4
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     d54:	03 97       	sbiw	r24, 0x03	; 3
     d56:	09 f0       	breq	.+2      	; 0xd5a <Cancel_BlockType+0x11e>
     d58:	a1 c1       	rjmp	.+834    	; 0x109c <Cancel_BlockType+0x460>
			matrix[r][c]   = 0;
     d5a:	d8 01       	movw	r26, r16
     d5c:	43 e0       	ldi	r20, 0x03	; 3
     d5e:	aa 0f       	add	r26, r26
     d60:	bb 1f       	adc	r27, r27
     d62:	4a 95       	dec	r20
     d64:	e1 f7       	brne	.-8      	; 0xd5e <Cancel_BlockType+0x122>
     d66:	a0 0f       	add	r26, r16
     d68:	b1 1f       	adc	r27, r17
     d6a:	fd 01       	movw	r30, r26
     d6c:	ec 0f       	add	r30, r28
     d6e:	fd 1f       	adc	r31, r29
     d70:	ee 0f       	add	r30, r30
     d72:	ff 1f       	adc	r31, r31
     d74:	e6 53       	subi	r30, 0x36	; 54
     d76:	fe 4f       	sbci	r31, 0xFE	; 254
     d78:	11 82       	std	Z+1, r1	; 0x01
     d7a:	10 82       	st	Z, r1
			matrix[r-1][c] = 0;
     d7c:	c8 01       	movw	r24, r16
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	fc 01       	movw	r30, r24
     d82:	23 e0       	ldi	r18, 0x03	; 3
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	2a 95       	dec	r18
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <Cancel_BlockType+0x148>
     d8c:	e8 0f       	add	r30, r24
     d8e:	f9 1f       	adc	r31, r25
     d90:	ec 0f       	add	r30, r28
     d92:	fd 1f       	adc	r31, r29
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	e6 53       	subi	r30, 0x36	; 54
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	11 82       	std	Z+1, r1	; 0x01
     d9e:	10 82       	st	Z, r1
			matrix[r][c-1] = 0;
     da0:	21 97       	sbiw	r28, 0x01	; 1
     da2:	ac 0f       	add	r26, r28
     da4:	bd 1f       	adc	r27, r29
     da6:	21 96       	adiw	r28, 0x01	; 1
     da8:	f2 c0       	rjmp	.+484    	; 0xf8e <Cancel_BlockType+0x352>
			matrix[r+1][c] = 0;
		}
	}
	
	//line
	else if (BlockType == 2) {
     daa:	42 30       	cpi	r20, 0x02	; 2
     dac:	51 05       	cpc	r21, r1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <Cancel_BlockType+0x176>
     db0:	53 c0       	rjmp	.+166    	; 0xe58 <Cancel_BlockType+0x21c>
		if (RotateBlock  % 2 == 0){
     db2:	80 91 8c 00 	lds	r24, 0x008C
     db6:	90 91 8d 00 	lds	r25, 0x008D
     dba:	80 fd       	sbrc	r24, 0
     dbc:	1f c0       	rjmp	.+62     	; 0xdfc <Cancel_BlockType+0x1c0>
			matrix[r][c]   = 0;
     dbe:	f8 01       	movw	r30, r16
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	8a 95       	dec	r24
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <Cancel_BlockType+0x186>
     dca:	e0 0f       	add	r30, r16
     dcc:	f1 1f       	adc	r31, r17
     dce:	df 01       	movw	r26, r30
     dd0:	a6 0f       	add	r26, r22
     dd2:	b7 1f       	adc	r27, r23
     dd4:	aa 0f       	add	r26, r26
     dd6:	bb 1f       	adc	r27, r27
     dd8:	a6 53       	subi	r26, 0x36	; 54
     dda:	be 4f       	sbci	r27, 0xFE	; 254
     ddc:	11 96       	adiw	r26, 0x01	; 1
     dde:	1c 92       	st	X, r1
     de0:	1e 92       	st	-X, r1
			matrix[r][c-1] = 0;
     de2:	21 97       	sbiw	r28, 0x01	; 1
     de4:	df 01       	movw	r26, r30
     de6:	ac 0f       	add	r26, r28
     de8:	bd 1f       	adc	r27, r29
     dea:	aa 0f       	add	r26, r26
     dec:	bb 1f       	adc	r27, r27
     dee:	a6 53       	subi	r26, 0x36	; 54
     df0:	be 4f       	sbci	r27, 0xFE	; 254
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	1c 92       	st	X, r1
     df6:	1e 92       	st	-X, r1
			matrix[r][c+1] = 0;
     df8:	22 96       	adiw	r28, 0x02	; 2
     dfa:	48 c1       	rjmp	.+656    	; 0x108c <Cancel_BlockType+0x450>
		}
		else if (RotateBlock  % 2 == 1){
     dfc:	80 91 8c 00 	lds	r24, 0x008C
     e00:	90 91 8d 00 	lds	r25, 0x008D
     e04:	62 e0       	ldi	r22, 0x02	; 2
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	09 f0       	breq	.+2      	; 0xe12 <Cancel_BlockType+0x1d6>
     e10:	45 c1       	rjmp	.+650    	; 0x109c <Cancel_BlockType+0x460>
			matrix[r][c]   = 0;
     e12:	f8 01       	movw	r30, r16
     e14:	63 e0       	ldi	r22, 0x03	; 3
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	6a 95       	dec	r22
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <Cancel_BlockType+0x1da>
     e1e:	e0 0f       	add	r30, r16
     e20:	f1 1f       	adc	r31, r17
     e22:	ec 0f       	add	r30, r28
     e24:	fd 1f       	adc	r31, r29
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	e6 53       	subi	r30, 0x36	; 54
     e2c:	fe 4f       	sbci	r31, 0xFE	; 254
     e2e:	11 82       	std	Z+1, r1	; 0x01
     e30:	10 82       	st	Z, r1
			matrix[r-1][c] = 0;
     e32:	c8 01       	movw	r24, r16
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	fc 01       	movw	r30, r24
     e38:	43 e0       	ldi	r20, 0x03	; 3
     e3a:	ee 0f       	add	r30, r30
     e3c:	ff 1f       	adc	r31, r31
     e3e:	4a 95       	dec	r20
     e40:	e1 f7       	brne	.-8      	; 0xe3a <Cancel_BlockType+0x1fe>
     e42:	e8 0f       	add	r30, r24
     e44:	f9 1f       	adc	r31, r25
     e46:	ec 0f       	add	r30, r28
     e48:	fd 1f       	adc	r31, r29
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	e6 53       	subi	r30, 0x36	; 54
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	11 82       	std	Z+1, r1	; 0x01
     e54:	10 82       	st	Z, r1
     e56:	a2 c0       	rjmp	.+324    	; 0xf9c <Cancel_BlockType+0x360>
			matrix[r+1][c] = 0;
		}
	}
	
	//box
	else if (BlockType == 3) {
     e58:	43 30       	cpi	r20, 0x03	; 3
     e5a:	51 05       	cpc	r21, r1
     e5c:	91 f5       	brne	.+100    	; 0xec2 <Cancel_BlockType+0x286>
		matrix[r][c]     = 0;
     e5e:	dc 01       	movw	r26, r24
     e60:	23 e0       	ldi	r18, 0x03	; 3
     e62:	aa 0f       	add	r26, r26
     e64:	bb 1f       	adc	r27, r27
     e66:	2a 95       	dec	r18
     e68:	e1 f7       	brne	.-8      	; 0xe62 <Cancel_BlockType+0x226>
     e6a:	a8 0f       	add	r26, r24
     e6c:	b9 1f       	adc	r27, r25
     e6e:	fd 01       	movw	r30, r26
     e70:	e6 0f       	add	r30, r22
     e72:	f7 1f       	adc	r31, r23
     e74:	ee 0f       	add	r30, r30
     e76:	ff 1f       	adc	r31, r31
     e78:	e6 53       	subi	r30, 0x36	; 54
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	11 82       	std	Z+1, r1	; 0x01
     e7e:	10 82       	st	Z, r1
		matrix[r][c+1]   = 0;
     e80:	9b 01       	movw	r18, r22
     e82:	2f 5f       	subi	r18, 0xFF	; 255
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	a2 0f       	add	r26, r18
     e88:	b3 1f       	adc	r27, r19
     e8a:	aa 0f       	add	r26, r26
     e8c:	bb 1f       	adc	r27, r27
     e8e:	a6 53       	subi	r26, 0x36	; 54
     e90:	be 4f       	sbci	r27, 0xFE	; 254
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	1c 92       	st	X, r1
     e96:	1e 92       	st	-X, r1
		matrix[r-1][c]   = 0;
     e98:	c8 01       	movw	r24, r16
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	fc 01       	movw	r30, r24
     e9e:	b3 e0       	ldi	r27, 0x03	; 3
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	ba 95       	dec	r27
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <Cancel_BlockType+0x264>
     ea8:	e8 0f       	add	r30, r24
     eaa:	f9 1f       	adc	r31, r25
     eac:	ce 0f       	add	r28, r30
     eae:	df 1f       	adc	r29, r31
     eb0:	cc 0f       	add	r28, r28
     eb2:	dd 1f       	adc	r29, r29
     eb4:	c6 53       	subi	r28, 0x36	; 54
     eb6:	de 4f       	sbci	r29, 0xFE	; 254
     eb8:	19 82       	std	Y+1, r1	; 0x01
     eba:	18 82       	st	Y, r1
		matrix[r-1][c+1] = 0;
     ebc:	e2 0f       	add	r30, r18
     ebe:	f3 1f       	adc	r31, r19
     ec0:	e7 c0       	rjmp	.+462    	; 0x1090 <Cancel_BlockType+0x454>
	}
	
	//L
	else if (BlockType == 4) {
     ec2:	44 30       	cpi	r20, 0x04	; 4
     ec4:	51 05       	cpc	r21, r1
     ec6:	09 f0       	breq	.+2      	; 0xeca <Cancel_BlockType+0x28e>
     ec8:	e9 c0       	rjmp	.+466    	; 0x109c <Cancel_BlockType+0x460>
		if (RotateBlock % 4 == 0){
     eca:	80 91 8c 00 	lds	r24, 0x008C
     ece:	90 91 8d 00 	lds	r25, 0x008D
     ed2:	83 70       	andi	r24, 0x03	; 3
     ed4:	90 70       	andi	r25, 0x00	; 0
     ed6:	89 2b       	or	r24, r25
     ed8:	89 f5       	brne	.+98     	; 0xf3c <Cancel_BlockType+0x300>
			matrix[r][c]   = 0;
     eda:	d8 01       	movw	r26, r16
     edc:	73 e0       	ldi	r23, 0x03	; 3
     ede:	aa 0f       	add	r26, r26
     ee0:	bb 1f       	adc	r27, r27
     ee2:	7a 95       	dec	r23
     ee4:	e1 f7       	brne	.-8      	; 0xede <Cancel_BlockType+0x2a2>
     ee6:	a0 0f       	add	r26, r16
     ee8:	b1 1f       	adc	r27, r17
     eea:	fd 01       	movw	r30, r26
     eec:	ec 0f       	add	r30, r28
     eee:	fd 1f       	adc	r31, r29
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	e6 53       	subi	r30, 0x36	; 54
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	11 82       	std	Z+1, r1	; 0x01
     efa:	10 82       	st	Z, r1
			matrix[r][c+1] = 0;
     efc:	21 96       	adiw	r28, 0x01	; 1
     efe:	ac 0f       	add	r26, r28
     f00:	bd 1f       	adc	r27, r29
     f02:	21 97       	sbiw	r28, 0x01	; 1
     f04:	aa 0f       	add	r26, r26
     f06:	bb 1f       	adc	r27, r27
     f08:	a6 53       	subi	r26, 0x36	; 54
     f0a:	be 4f       	sbci	r27, 0xFE	; 254
     f0c:	11 96       	adiw	r26, 0x01	; 1
     f0e:	1c 92       	st	X, r1
     f10:	1e 92       	st	-X, r1
			matrix[r-1][c] = 0;
     f12:	c8 01       	movw	r24, r16
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	fc 01       	movw	r30, r24
     f18:	43 e0       	ldi	r20, 0x03	; 3
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	4a 95       	dec	r20
     f20:	e1 f7       	brne	.-8      	; 0xf1a <Cancel_BlockType+0x2de>
     f22:	e8 0f       	add	r30, r24
     f24:	f9 1f       	adc	r31, r25
     f26:	ec 0f       	add	r30, r28
     f28:	fd 1f       	adc	r31, r29
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	e6 53       	subi	r30, 0x36	; 54
     f30:	fe 4f       	sbci	r31, 0xFE	; 254
     f32:	11 82       	std	Z+1, r1	; 0x01
     f34:	10 82       	st	Z, r1
			matrix[r-2][c] = 0;
     f36:	c8 01       	movw	r24, r16
     f38:	02 97       	sbiw	r24, 0x02	; 2
     f3a:	a0 c0       	rjmp	.+320    	; 0x107c <Cancel_BlockType+0x440>
		}
		else if (RotateBlock % 4 == 1){
     f3c:	80 91 8c 00 	lds	r24, 0x008C
     f40:	90 91 8d 00 	lds	r25, 0x008D
     f44:	64 e0       	ldi	r22, 0x04	; 4
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	49 f5       	brne	.+82     	; 0xfa2 <Cancel_BlockType+0x366>
			matrix[r][c]   = 0;
     f50:	d8 01       	movw	r26, r16
     f52:	23 e0       	ldi	r18, 0x03	; 3
     f54:	aa 0f       	add	r26, r26
     f56:	bb 1f       	adc	r27, r27
     f58:	2a 95       	dec	r18
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <Cancel_BlockType+0x318>
     f5c:	a0 0f       	add	r26, r16
     f5e:	b1 1f       	adc	r27, r17
     f60:	fd 01       	movw	r30, r26
     f62:	ec 0f       	add	r30, r28
     f64:	fd 1f       	adc	r31, r29
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	e6 53       	subi	r30, 0x36	; 54
     f6c:	fe 4f       	sbci	r31, 0xFE	; 254
     f6e:	11 82       	std	Z+1, r1	; 0x01
     f70:	10 82       	st	Z, r1
			matrix[r][c+1] = 0;
     f72:	fe 01       	movw	r30, r28
     f74:	31 96       	adiw	r30, 0x01	; 1
     f76:	ea 0f       	add	r30, r26
     f78:	fb 1f       	adc	r31, r27
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	e6 53       	subi	r30, 0x36	; 54
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	11 82       	std	Z+1, r1	; 0x01
     f84:	10 82       	st	Z, r1
			matrix[r][c+2] = 0;
     f86:	22 96       	adiw	r28, 0x02	; 2
     f88:	ac 0f       	add	r26, r28
     f8a:	bd 1f       	adc	r27, r29
     f8c:	22 97       	sbiw	r28, 0x02	; 2
     f8e:	aa 0f       	add	r26, r26
     f90:	bb 1f       	adc	r27, r27
     f92:	a6 53       	subi	r26, 0x36	; 54
     f94:	be 4f       	sbci	r27, 0xFE	; 254
     f96:	11 96       	adiw	r26, 0x01	; 1
     f98:	1c 92       	st	X, r1
     f9a:	1e 92       	st	-X, r1
			matrix[r+1][c] = 0;
     f9c:	c8 01       	movw	r24, r16
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	6d c0       	rjmp	.+218    	; 0x107c <Cancel_BlockType+0x440>
		}
		else if (RotateBlock % 4 == 2){
     fa2:	80 91 8c 00 	lds	r24, 0x008C
     fa6:	90 91 8d 00 	lds	r25, 0x008D
     faa:	64 e0       	ldi	r22, 0x04	; 4
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
     fb2:	02 97       	sbiw	r24, 0x02	; 2
     fb4:	89 f5       	brne	.+98     	; 0x1018 <Cancel_BlockType+0x3dc>
			matrix[r][c]   = 0;
     fb6:	d8 01       	movw	r26, r16
     fb8:	e3 e0       	ldi	r30, 0x03	; 3
     fba:	aa 0f       	add	r26, r26
     fbc:	bb 1f       	adc	r27, r27
     fbe:	ea 95       	dec	r30
     fc0:	e1 f7       	brne	.-8      	; 0xfba <Cancel_BlockType+0x37e>
     fc2:	a0 0f       	add	r26, r16
     fc4:	b1 1f       	adc	r27, r17
     fc6:	fd 01       	movw	r30, r26
     fc8:	ec 0f       	add	r30, r28
     fca:	fd 1f       	adc	r31, r29
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	e6 53       	subi	r30, 0x36	; 54
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	11 82       	std	Z+1, r1	; 0x01
     fd6:	10 82       	st	Z, r1
			matrix[r][c-1] = 0;
     fd8:	21 97       	sbiw	r28, 0x01	; 1
     fda:	ac 0f       	add	r26, r28
     fdc:	bd 1f       	adc	r27, r29
     fde:	21 96       	adiw	r28, 0x01	; 1
     fe0:	aa 0f       	add	r26, r26
     fe2:	bb 1f       	adc	r27, r27
     fe4:	a6 53       	subi	r26, 0x36	; 54
     fe6:	be 4f       	sbci	r27, 0xFE	; 254
     fe8:	11 96       	adiw	r26, 0x01	; 1
     fea:	1c 92       	st	X, r1
     fec:	1e 92       	st	-X, r1
			matrix[r+1][c] = 0;
     fee:	c8 01       	movw	r24, r16
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	fc 01       	movw	r30, r24
     ff4:	53 e0       	ldi	r21, 0x03	; 3
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	5a 95       	dec	r21
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <Cancel_BlockType+0x3ba>
     ffe:	e8 0f       	add	r30, r24
    1000:	f9 1f       	adc	r31, r25
    1002:	ec 0f       	add	r30, r28
    1004:	fd 1f       	adc	r31, r29
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	e6 53       	subi	r30, 0x36	; 54
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	11 82       	std	Z+1, r1	; 0x01
    1010:	10 82       	st	Z, r1
			matrix[r+2][c] = 0;
    1012:	c8 01       	movw	r24, r16
    1014:	02 96       	adiw	r24, 0x02	; 2
    1016:	32 c0       	rjmp	.+100    	; 0x107c <Cancel_BlockType+0x440>
		}
		else if (RotateBlock % 4 == 3){
    1018:	80 91 8c 00 	lds	r24, 0x008C
    101c:	90 91 8d 00 	lds	r25, 0x008D
    1020:	64 e0       	ldi	r22, 0x04	; 4
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    1028:	03 97       	sbiw	r24, 0x03	; 3
    102a:	c1 f5       	brne	.+112    	; 0x109c <Cancel_BlockType+0x460>
			matrix[r][c]   = 0;
    102c:	d8 01       	movw	r26, r16
    102e:	33 e0       	ldi	r19, 0x03	; 3
    1030:	aa 0f       	add	r26, r26
    1032:	bb 1f       	adc	r27, r27
    1034:	3a 95       	dec	r19
    1036:	e1 f7       	brne	.-8      	; 0x1030 <Cancel_BlockType+0x3f4>
    1038:	a0 0f       	add	r26, r16
    103a:	b1 1f       	adc	r27, r17
    103c:	fd 01       	movw	r30, r26
    103e:	ec 0f       	add	r30, r28
    1040:	fd 1f       	adc	r31, r29
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	e6 53       	subi	r30, 0x36	; 54
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	11 82       	std	Z+1, r1	; 0x01
    104c:	10 82       	st	Z, r1
			matrix[r][c-1] = 0;
    104e:	fe 01       	movw	r30, r28
    1050:	31 97       	sbiw	r30, 0x01	; 1
    1052:	ea 0f       	add	r30, r26
    1054:	fb 1f       	adc	r31, r27
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	e6 53       	subi	r30, 0x36	; 54
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	11 82       	std	Z+1, r1	; 0x01
    1060:	10 82       	st	Z, r1
			matrix[r][c-2] = 0;
    1062:	22 97       	sbiw	r28, 0x02	; 2
    1064:	ac 0f       	add	r26, r28
    1066:	bd 1f       	adc	r27, r29
    1068:	22 96       	adiw	r28, 0x02	; 2
    106a:	aa 0f       	add	r26, r26
    106c:	bb 1f       	adc	r27, r27
    106e:	a6 53       	subi	r26, 0x36	; 54
    1070:	be 4f       	sbci	r27, 0xFE	; 254
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	1c 92       	st	X, r1
    1076:	1e 92       	st	-X, r1
			matrix[r-1][c] = 0;
    1078:	c8 01       	movw	r24, r16
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	fc 01       	movw	r30, r24
    107e:	b3 e0       	ldi	r27, 0x03	; 3
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	ba 95       	dec	r27
    1086:	e1 f7       	brne	.-8      	; 0x1080 <Cancel_BlockType+0x444>
    1088:	e8 0f       	add	r30, r24
    108a:	f9 1f       	adc	r31, r25
    108c:	ec 0f       	add	r30, r28
    108e:	fd 1f       	adc	r31, r29
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	e6 53       	subi	r30, 0x36	; 54
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	11 82       	std	Z+1, r1	; 0x01
    109a:	10 82       	st	Z, r1
		}
	}
	
}
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	08 95       	ret

000010a6 <makeBOARD>:
	}
}

//------------------------------------------------------------

void makeBOARD(){ 
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	a0 97       	sbiw	r28, 0x20	; 32
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
	cli();
    10ca:	f8 94       	cli
    10cc:	5e 01       	movw	r10, r28
    10ce:	08 94       	sec
    10d0:	a1 1c       	adc	r10, r1
    10d2:	b1 1c       	adc	r11, r1
    10d4:	75 01       	movw	r14, r10
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
}

int getRow(int x) {
	int row = 0;
	for (int i = 1; i <= 8; i++){
		 row = row | (matrix[x][i] << (8-i));
    10da:	28 e0       	ldi	r18, 0x08	; 8
    10dc:	c2 2e       	mov	r12, r18
    10de:	d1 2c       	mov	r13, r1
void makeBOARD(){ 
	cli();
	int i,j,k,p;
	int valArr[16];

	for (p = 0; p < 16; p++) valArr[p] = getRow(p+1);
    10e0:	11 96       	adiw	r26, 0x01	; 1
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	00 e0       	ldi	r16, 0x00	; 0
    10e8:	10 e0       	ldi	r17, 0x00	; 0
}

int getRow(int x) {
	int row = 0;
	for (int i = 1; i <= 8; i++){
		 row = row | (matrix[x][i] << (8-i));
    10ea:	bd 01       	movw	r22, r26
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	66 0f       	add	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	9a 95       	dec	r25
    10f4:	e1 f7       	brne	.-8      	; 0x10ee <makeBOARD+0x48>
    10f6:	6a 0f       	add	r22, r26
    10f8:	7b 1f       	adc	r23, r27
    10fa:	fb 01       	movw	r30, r22
    10fc:	e4 0f       	add	r30, r20
    10fe:	f5 1f       	adc	r31, r21
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	e6 53       	subi	r30, 0x36	; 54
    1106:	fe 4f       	sbci	r31, 0xFE	; 254
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	96 01       	movw	r18, r12
    110e:	24 1b       	sub	r18, r20
    1110:	35 0b       	sbc	r19, r21
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <makeBOARD+0x72>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	2a 95       	dec	r18
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <makeBOARD+0x6e>
    111c:	08 2b       	or	r16, r24
    111e:	19 2b       	or	r17, r25
	matrix[r][c] = 1;
}

int getRow(int x) {
	int row = 0;
	for (int i = 1; i <= 8; i++){
    1120:	4f 5f       	subi	r20, 0xFF	; 255
    1122:	5f 4f       	sbci	r21, 0xFF	; 255
    1124:	49 30       	cpi	r20, 0x09	; 9
    1126:	51 05       	cpc	r21, r1
    1128:	41 f7       	brne	.-48     	; 0x10fa <makeBOARD+0x54>
void makeBOARD(){ 
	cli();
	int i,j,k,p;
	int valArr[16];

	for (p = 0; p < 16; p++) valArr[p] = getRow(p+1);
    112a:	f7 01       	movw	r30, r14
    112c:	01 93       	st	Z+, r16
    112e:	11 93       	st	Z+, r17
    1130:	7f 01       	movw	r14, r30
    1132:	a0 31       	cpi	r26, 0x10	; 16
    1134:	b1 05       	cpc	r27, r1
    1136:	a1 f6       	brne	.-88     	; 0x10e0 <makeBOARD+0x3a>
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	1c c0       	rjmp	.+56     	; 0x1176 <makeBOARD+0xd0>
	for(k = 0; k < 180; k++){
     //K and j - speed
		for(i = 1; i <= 16; i++){
			int data = valArr[i-1];
    113e:	1c 91       	ld	r17, X
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	30 e0       	ldi	r19, 0x00	; 0
			for (j = 1; j <= 10; j++){
				DECODDER_DATA = downValue[i-1];
    1144:	fa 01       	movw	r30, r20
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	e0 5a       	subi	r30, 0xA0	; 160
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	8b bb       	out	0x1b, r24	; 27
				LED_DATA = data;
    1154:	15 bb       	out	0x15, r17	; 21
	for (p = 0; p < 16; p++) valArr[p] = getRow(p+1);
	for(k = 0; k < 180; k++){
     //K and j - speed
		for(i = 1; i <= 16; i++){
			int data = valArr[i-1];
			for (j = 1; j <= 10; j++){
    1156:	2f 5f       	subi	r18, 0xFF	; 255
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	2b 30       	cpi	r18, 0x0B	; 11
    115c:	31 05       	cpc	r19, r1
    115e:	b9 f7       	brne	.-18     	; 0x114e <makeBOARD+0xa8>
    1160:	4f 5f       	subi	r20, 0xFF	; 255
    1162:	5f 4f       	sbci	r21, 0xFF	; 255
    1164:	12 96       	adiw	r26, 0x02	; 2
	int valArr[16];

	for (p = 0; p < 16; p++) valArr[p] = getRow(p+1);
	for(k = 0; k < 180; k++){
     //K and j - speed
		for(i = 1; i <= 16; i++){
    1166:	40 31       	cpi	r20, 0x10	; 16
    1168:	51 05       	cpc	r21, r1
    116a:	49 f7       	brne	.-46     	; 0x113e <makeBOARD+0x98>
	cli();
	int i,j,k,p;
	int valArr[16];

	for (p = 0; p < 16; p++) valArr[p] = getRow(p+1);
	for(k = 0; k < 180; k++){
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	64 3b       	cpi	r22, 0xB4	; 180
    1172:	71 05       	cpc	r23, r1
    1174:	21 f0       	breq	.+8      	; 0x117e <makeBOARD+0xd8>
    1176:	d5 01       	movw	r26, r10
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	e0 cf       	rjmp	.-64     	; 0x113e <makeBOARD+0x98>
				LED_DATA = data;
			}
		}
	}
	
	sei();
    117e:	78 94       	sei
}
    1180:	a0 96       	adiw	r28, 0x20	; 32
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	bf 90       	pop	r11
    119e:	af 90       	pop	r10
    11a0:	08 95       	ret

000011a2 <matrixfull>:

//---------------------------------------------------

int matrixfull(){
	if(BlockType==1 && (matrix[1][3]==1 || matrix[1][4]==1 || matrix[1][5]==1)){
    11a2:	80 91 96 00 	lds	r24, 0x0096
    11a6:	90 91 97 00 	lds	r25, 0x0097
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	a9 f4       	brne	.+42     	; 0x11d8 <matrixfull+0x36>
    11ae:	80 91 e2 01 	lds	r24, 0x01E2
    11b2:	90 91 e3 01 	lds	r25, 0x01E3
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <matrixfull+0x1a>
    11ba:	4f c0       	rjmp	.+158    	; 0x125a <matrixfull+0xb8>
    11bc:	80 91 e4 01 	lds	r24, 0x01E4
    11c0:	90 91 e5 01 	lds	r25, 0x01E5
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	09 f4       	brne	.+2      	; 0x11ca <matrixfull+0x28>
    11c8:	48 c0       	rjmp	.+144    	; 0x125a <matrixfull+0xb8>
    11ca:	80 91 e6 01 	lds	r24, 0x01E6
    11ce:	90 91 e7 01 	lds	r25, 0x01E7
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <matrixfull+0x36>
    11d6:	41 c0       	rjmp	.+130    	; 0x125a <matrixfull+0xb8>
		 return 1;
	}
	else if(BlockType==2 && (matrix[1][3]==1 || matrix[1][4]==1 || matrix[1][5]==1)){
    11d8:	80 91 96 00 	lds	r24, 0x0096
    11dc:	90 91 97 00 	lds	r25, 0x0097
    11e0:	02 97       	sbiw	r24, 0x02	; 2
    11e2:	91 f4       	brne	.+36     	; 0x1208 <matrixfull+0x66>
    11e4:	80 91 e2 01 	lds	r24, 0x01E2
    11e8:	90 91 e3 01 	lds	r25, 0x01E3
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	a9 f1       	breq	.+106    	; 0x125a <matrixfull+0xb8>
    11f0:	80 91 e4 01 	lds	r24, 0x01E4
    11f4:	90 91 e5 01 	lds	r25, 0x01E5
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	79 f1       	breq	.+94     	; 0x125a <matrixfull+0xb8>
    11fc:	80 91 e6 01 	lds	r24, 0x01E6
    1200:	90 91 e7 01 	lds	r25, 0x01E7
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	49 f1       	breq	.+82     	; 0x125a <matrixfull+0xb8>
		 return 1;
	}
	else if(BlockType==3 && (matrix[1][4]==1 || matrix[1][5]==1)){
    1208:	80 91 96 00 	lds	r24, 0x0096
    120c:	90 91 97 00 	lds	r25, 0x0097
    1210:	03 97       	sbiw	r24, 0x03	; 3
    1212:	61 f4       	brne	.+24     	; 0x122c <matrixfull+0x8a>
    1214:	80 91 e4 01 	lds	r24, 0x01E4
    1218:	90 91 e5 01 	lds	r25, 0x01E5
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	e9 f0       	breq	.+58     	; 0x125a <matrixfull+0xb8>
    1220:	80 91 e6 01 	lds	r24, 0x01E6
    1224:	90 91 e7 01 	lds	r25, 0x01E7
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	b9 f0       	breq	.+46     	; 0x125a <matrixfull+0xb8>
		 return 1;
	}
	else if(BlockType==4 && (matrix[1][4]==1 || matrix[1][5]==1)){
    122c:	80 91 96 00 	lds	r24, 0x0096
    1230:	90 91 97 00 	lds	r25, 0x0097
    1234:	04 97       	sbiw	r24, 0x04	; 4
    1236:	19 f0       	breq	.+6      	; 0x123e <matrixfull+0x9c>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	10 c0       	rjmp	.+32     	; 0x125e <matrixfull+0xbc>
    123e:	80 91 e4 01 	lds	r24, 0x01E4
    1242:	90 91 e5 01 	lds	r25, 0x01E5
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	41 f0       	breq	.+16     	; 0x125a <matrixfull+0xb8>
    124a:	80 91 e6 01 	lds	r24, 0x01E6
    124e:	90 91 e7 01 	lds	r25, 0x01E7
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	11 f4       	brne	.+4      	; 0x125e <matrixfull+0xbc>
    125a:	21 e0       	ldi	r18, 0x01	; 1
    125c:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	else{
		 return 0;
	}
}
    125e:	c9 01       	movw	r24, r18
    1260:	08 95       	ret

00001262 <right_coner>:

void right_coner(){
	
	//T
	
	if (BlockType == 1){
    1262:	80 91 96 00 	lds	r24, 0x0096
    1266:	90 91 97 00 	lds	r25, 0x0097
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	09 f0       	breq	.+2      	; 0x1270 <right_coner+0xe>
    126e:	4a c0       	rjmp	.+148    	; 0x1304 <right_coner+0xa2>
		if (RotateBlock % 4 == 0 && Now_PosiY < 2){
    1270:	80 91 8c 00 	lds	r24, 0x008C
    1274:	90 91 8d 00 	lds	r25, 0x008D
    1278:	83 70       	andi	r24, 0x03	; 3
    127a:	90 70       	andi	r25, 0x00	; 0
    127c:	89 2b       	or	r24, r25
    127e:	31 f4       	brne	.+12     	; 0x128c <right_coner+0x2a>
    1280:	80 91 82 00 	lds	r24, 0x0082
    1284:	90 91 83 00 	lds	r25, 0x0083
    1288:	02 97       	sbiw	r24, 0x02	; 2
    128a:	cc f1       	brlt	.+114    	; 0x12fe <right_coner+0x9c>
		 Now_PosiY = 2;
		}
		else if (RotateBlock % 4 == 1 && Now_PosiY < 1){
    128c:	80 91 8c 00 	lds	r24, 0x008C
    1290:	90 91 8d 00 	lds	r25, 0x008D
    1294:	64 e0       	ldi	r22, 0x04	; 4
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    129c:	9c 01       	movw	r18, r24
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	41 f4       	brne	.+16     	; 0x12b4 <right_coner+0x52>
    12a4:	80 91 82 00 	lds	r24, 0x0082
    12a8:	90 91 83 00 	lds	r25, 0x0083
    12ac:	18 16       	cp	r1, r24
    12ae:	19 06       	cpc	r1, r25
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <right_coner+0x52>
    12b2:	a3 c0       	rjmp	.+326    	; 0x13fa <right_coner+0x198>
			 Now_PosiY = 1;
		}
		else if (RotateBlock % 4 == 2 && Now_PosiY < 2){
    12b4:	80 91 8c 00 	lds	r24, 0x008C
    12b8:	90 91 8d 00 	lds	r25, 0x008D
    12bc:	64 e0       	ldi	r22, 0x04	; 4
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    12c4:	9c 01       	movw	r18, r24
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	91 05       	cpc	r25, r1
    12ca:	39 f4       	brne	.+14     	; 0x12da <right_coner+0x78>
    12cc:	80 91 82 00 	lds	r24, 0x0082
    12d0:	90 91 83 00 	lds	r25, 0x0083
    12d4:	02 97       	sbiw	r24, 0x02	; 2
    12d6:	0c f4       	brge	.+2      	; 0x12da <right_coner+0x78>
    12d8:	90 c0       	rjmp	.+288    	; 0x13fa <right_coner+0x198>
			 Now_PosiY = 2;
		}
		else if (RotateBlock % 4 == 3 && Now_PosiY < 2){
    12da:	80 91 8c 00 	lds	r24, 0x008C
    12de:	90 91 8d 00 	lds	r25, 0x008D
    12e2:	64 e0       	ldi	r22, 0x04	; 4
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    12ea:	03 97       	sbiw	r24, 0x03	; 3
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <right_coner+0x8e>
    12ee:	a0 c0       	rjmp	.+320    	; 0x1430 <right_coner+0x1ce>
    12f0:	80 91 82 00 	lds	r24, 0x0082
    12f4:	90 91 83 00 	lds	r25, 0x0083
    12f8:	02 97       	sbiw	r24, 0x02	; 2
    12fa:	0c f0       	brlt	.+2      	; 0x12fe <right_coner+0x9c>
    12fc:	99 c0       	rjmp	.+306    	; 0x1430 <right_coner+0x1ce>
			 Now_PosiY= 2;
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	51 c0       	rjmp	.+162    	; 0x13a6 <right_coner+0x144>
		}
	}
	
	//Line
	
	else if (BlockType == 2){
    1304:	20 91 96 00 	lds	r18, 0x0096
    1308:	30 91 97 00 	lds	r19, 0x0097
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	19 f5       	brne	.+70     	; 0x1358 <right_coner+0xf6>
		if (RotateBlock % 2 == 0 && Now_PosiY < 2){
    1312:	80 91 8c 00 	lds	r24, 0x008C
    1316:	90 91 8d 00 	lds	r25, 0x008D
    131a:	80 fd       	sbrc	r24, 0
    131c:	07 c0       	rjmp	.+14     	; 0x132c <right_coner+0xca>
    131e:	80 91 82 00 	lds	r24, 0x0082
    1322:	90 91 83 00 	lds	r25, 0x0083
    1326:	02 97       	sbiw	r24, 0x02	; 2
    1328:	0c f4       	brge	.+2      	; 0x132c <right_coner+0xca>
    132a:	67 c0       	rjmp	.+206    	; 0x13fa <right_coner+0x198>
			 Now_PosiY = 2;
		}
		else if (RotateBlock % 2 == 1 && Now_PosiY < 1){
    132c:	80 91 8c 00 	lds	r24, 0x008C
    1330:	90 91 8d 00 	lds	r25, 0x008D
    1334:	62 e0       	ldi	r22, 0x02	; 2
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    133c:	9c 01       	movw	r18, r24
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	91 05       	cpc	r25, r1
    1342:	09 f0       	breq	.+2      	; 0x1346 <right_coner+0xe4>
    1344:	75 c0       	rjmp	.+234    	; 0x1430 <right_coner+0x1ce>
    1346:	80 91 82 00 	lds	r24, 0x0082
    134a:	90 91 83 00 	lds	r25, 0x0083
    134e:	18 16       	cp	r1, r24
    1350:	19 06       	cpc	r1, r25
    1352:	0c f4       	brge	.+2      	; 0x1356 <right_coner+0xf4>
    1354:	6d c0       	rjmp	.+218    	; 0x1430 <right_coner+0x1ce>
    1356:	51 c0       	rjmp	.+162    	; 0x13fa <right_coner+0x198>
		}
	}
	
	//Box
	
	else if (BlockType == 3){
    1358:	80 91 96 00 	lds	r24, 0x0096
    135c:	90 91 97 00 	lds	r25, 0x0097
    1360:	03 97       	sbiw	r24, 0x03	; 3
    1362:	49 f4       	brne	.+18     	; 0x1376 <right_coner+0x114>
		if (Now_PosiY < 1){
    1364:	80 91 82 00 	lds	r24, 0x0082
    1368:	90 91 83 00 	lds	r25, 0x0083
    136c:	18 16       	cp	r1, r24
    136e:	19 06       	cpc	r1, r25
    1370:	0c f4       	brge	.+2      	; 0x1374 <right_coner+0x112>
    1372:	5e c0       	rjmp	.+188    	; 0x1430 <right_coner+0x1ce>
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <right_coner+0x140>
		}
	}
	
	//L
	
	else if (BlockType == 4){
    1376:	80 91 96 00 	lds	r24, 0x0096
    137a:	90 91 97 00 	lds	r25, 0x0097
    137e:	04 97       	sbiw	r24, 0x04	; 4
    1380:	09 f0       	breq	.+2      	; 0x1384 <right_coner+0x122>
    1382:	56 c0       	rjmp	.+172    	; 0x1430 <right_coner+0x1ce>
		if (RotateBlock % 4 == 0 && Now_PosiY < 1){
    1384:	80 91 8c 00 	lds	r24, 0x008C
    1388:	90 91 8d 00 	lds	r25, 0x008D
    138c:	83 70       	andi	r24, 0x03	; 3
    138e:	90 70       	andi	r25, 0x00	; 0
    1390:	89 2b       	or	r24, r25
    1392:	71 f4       	brne	.+28     	; 0x13b0 <right_coner+0x14e>
    1394:	80 91 82 00 	lds	r24, 0x0082
    1398:	90 91 83 00 	lds	r25, 0x0083
    139c:	18 16       	cp	r1, r24
    139e:	19 06       	cpc	r1, r25
    13a0:	3c f0       	brlt	.+14     	; 0x13b0 <right_coner+0x14e>
		 Now_PosiY = 1;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	90 93 83 00 	sts	0x0083, r25
    13aa:	80 93 82 00 	sts	0x0082, r24
    13ae:	08 95       	ret
		}
		else if (RotateBlock % 4 == 1 && Now_PosiY < 1){
    13b0:	80 91 8c 00 	lds	r24, 0x008C
    13b4:	90 91 8d 00 	lds	r25, 0x008D
    13b8:	64 e0       	ldi	r22, 0x04	; 4
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    13c0:	9c 01       	movw	r18, r24
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	91 05       	cpc	r25, r1
    13c6:	39 f4       	brne	.+14     	; 0x13d6 <right_coner+0x174>
    13c8:	80 91 82 00 	lds	r24, 0x0082
    13cc:	90 91 83 00 	lds	r25, 0x0083
    13d0:	18 16       	cp	r1, r24
    13d2:	19 06       	cpc	r1, r25
    13d4:	94 f4       	brge	.+36     	; 0x13fa <right_coner+0x198>
			 Now_PosiY = 1;
		}
		else if (RotateBlock % 4 == 2 && Now_PosiY < 2){
    13d6:	80 91 8c 00 	lds	r24, 0x008C
    13da:	90 91 8d 00 	lds	r25, 0x008D
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    13e6:	9c 01       	movw	r18, r24
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	91 05       	cpc	r25, r1
    13ec:	59 f4       	brne	.+22     	; 0x1404 <right_coner+0x1a2>
    13ee:	80 91 82 00 	lds	r24, 0x0082
    13f2:	90 91 83 00 	lds	r25, 0x0083
    13f6:	02 97       	sbiw	r24, 0x02	; 2
    13f8:	2c f4       	brge	.+10     	; 0x1404 <right_coner+0x1a2>
			 Now_PosiY = 2;
    13fa:	30 93 83 00 	sts	0x0083, r19
    13fe:	20 93 82 00 	sts	0x0082, r18
    1402:	08 95       	ret
		}
		else if (RotateBlock % 4 == 3 && Now_PosiY < 3){
    1404:	80 91 8c 00 	lds	r24, 0x008C
    1408:	90 91 8d 00 	lds	r25, 0x008D
    140c:	64 e0       	ldi	r22, 0x04	; 4
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    1414:	9c 01       	movw	r18, r24
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	51 f4       	brne	.+20     	; 0x1430 <right_coner+0x1ce>
    141c:	80 91 82 00 	lds	r24, 0x0082
    1420:	90 91 83 00 	lds	r25, 0x0083
    1424:	03 97       	sbiw	r24, 0x03	; 3
    1426:	24 f4       	brge	.+8      	; 0x1430 <right_coner+0x1ce>
			 Now_PosiY = 3;
    1428:	30 93 83 00 	sts	0x0083, r19
    142c:	20 93 82 00 	sts	0x0082, r18
    1430:	08 95       	ret

00001432 <left_coner>:

void left_coner(){
	
	//T
	
	if (BlockType == 1){
    1432:	80 91 96 00 	lds	r24, 0x0096
    1436:	90 91 97 00 	lds	r25, 0x0097
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	09 f0       	breq	.+2      	; 0x1440 <left_coner+0xe>
    143e:	3d c0       	rjmp	.+122    	; 0x14ba <left_coner+0x88>
		if (RotateBlock % 4 == 0 && Now_PosiY > 7){
    1440:	80 91 8c 00 	lds	r24, 0x008C
    1444:	90 91 8d 00 	lds	r25, 0x008D
    1448:	83 70       	andi	r24, 0x03	; 3
    144a:	90 70       	andi	r25, 0x00	; 0
    144c:	89 2b       	or	r24, r25
    144e:	39 f4       	brne	.+14     	; 0x145e <left_coner+0x2c>
    1450:	80 91 82 00 	lds	r24, 0x0082
    1454:	90 91 83 00 	lds	r25, 0x0083
    1458:	08 97       	sbiw	r24, 0x08	; 8
    145a:	0c f0       	brlt	.+2      	; 0x145e <left_coner+0x2c>
    145c:	76 c0       	rjmp	.+236    	; 0x154a <left_coner+0x118>
			 Now_PosiY= 7;
		}
		else if (RotateBlock % 4 == 1 && Now_PosiY> 7){
    145e:	80 91 8c 00 	lds	r24, 0x008C
    1462:	90 91 8d 00 	lds	r25, 0x008D
    1466:	64 e0       	ldi	r22, 0x04	; 4
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	39 f4       	brne	.+14     	; 0x1480 <left_coner+0x4e>
    1472:	80 91 82 00 	lds	r24, 0x0082
    1476:	90 91 83 00 	lds	r25, 0x0083
    147a:	08 97       	sbiw	r24, 0x08	; 8
    147c:	0c f0       	brlt	.+2      	; 0x1480 <left_coner+0x4e>
    147e:	65 c0       	rjmp	.+202    	; 0x154a <left_coner+0x118>
			 Now_PosiY = 7;
		}
		else if (RotateBlock % 4 == 2 && Now_PosiY > 7){
    1480:	80 91 8c 00 	lds	r24, 0x008C
    1484:	90 91 8d 00 	lds	r25, 0x008D
    1488:	64 e0       	ldi	r22, 0x04	; 4
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    1490:	02 97       	sbiw	r24, 0x02	; 2
    1492:	39 f4       	brne	.+14     	; 0x14a2 <left_coner+0x70>
    1494:	80 91 82 00 	lds	r24, 0x0082
    1498:	90 91 83 00 	lds	r25, 0x0083
    149c:	08 97       	sbiw	r24, 0x08	; 8
    149e:	0c f0       	brlt	.+2      	; 0x14a2 <left_coner+0x70>
    14a0:	54 c0       	rjmp	.+168    	; 0x154a <left_coner+0x118>
			 Now_PosiY= 7;
		}
		else if (RotateBlock % 4 == 3 && Now_PosiY > 8){
    14a2:	80 91 8c 00 	lds	r24, 0x008C
    14a6:	90 91 8d 00 	lds	r25, 0x008D
    14aa:	64 e0       	ldi	r22, 0x04	; 4
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    14b2:	03 97       	sbiw	r24, 0x03	; 3
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <left_coner+0x86>
    14b6:	8c c0       	rjmp	.+280    	; 0x15d0 <left_coner+0x19e>
    14b8:	1d c0       	rjmp	.+58     	; 0x14f4 <left_coner+0xc2>
		}
	}
	
	//Line
	
	else if (BlockType == 2){
    14ba:	80 91 96 00 	lds	r24, 0x0096
    14be:	90 91 97 00 	lds	r25, 0x0097
    14c2:	02 97       	sbiw	r24, 0x02	; 2
    14c4:	f9 f4       	brne	.+62     	; 0x1504 <left_coner+0xd2>
		if (RotateBlock % 2 == 0 && Now_PosiY > 7){
    14c6:	80 91 8c 00 	lds	r24, 0x008C
    14ca:	90 91 8d 00 	lds	r25, 0x008D
    14ce:	80 fd       	sbrc	r24, 0
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <left_coner+0xac>
    14d2:	80 91 82 00 	lds	r24, 0x0082
    14d6:	90 91 83 00 	lds	r25, 0x0083
    14da:	08 97       	sbiw	r24, 0x08	; 8
    14dc:	b4 f5       	brge	.+108    	; 0x154a <left_coner+0x118>
			 Now_PosiY = 7;
		}
		else if (RotateBlock % 2 == 1 && Now_PosiY > 8){
    14de:	80 91 8c 00 	lds	r24, 0x008C
    14e2:	90 91 8d 00 	lds	r25, 0x008D
    14e6:	62 e0       	ldi	r22, 0x02	; 2
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <left_coner+0xc2>
    14f2:	6e c0       	rjmp	.+220    	; 0x15d0 <left_coner+0x19e>
    14f4:	80 91 82 00 	lds	r24, 0x0082
    14f8:	90 91 83 00 	lds	r25, 0x0083
    14fc:	09 97       	sbiw	r24, 0x09	; 9
    14fe:	0c f4       	brge	.+2      	; 0x1502 <left_coner+0xd0>
    1500:	67 c0       	rjmp	.+206    	; 0x15d0 <left_coner+0x19e>
    1502:	49 c0       	rjmp	.+146    	; 0x1596 <left_coner+0x164>
		}
	}
	
	//Box
	
	else if (BlockType == 3){
    1504:	80 91 96 00 	lds	r24, 0x0096
    1508:	90 91 97 00 	lds	r25, 0x0097
    150c:	03 97       	sbiw	r24, 0x03	; 3
    150e:	41 f4       	brne	.+16     	; 0x1520 <left_coner+0xee>
		if (Now_PosiY > 7){
    1510:	80 91 82 00 	lds	r24, 0x0082
    1514:	90 91 83 00 	lds	r25, 0x0083
    1518:	08 97       	sbiw	r24, 0x08	; 8
    151a:	0c f4       	brge	.+2      	; 0x151e <left_coner+0xec>
    151c:	59 c0       	rjmp	.+178    	; 0x15d0 <left_coner+0x19e>
    151e:	15 c0       	rjmp	.+42     	; 0x154a <left_coner+0x118>
		}
	}
	
	//L
	
	else if (BlockType == 4){
    1520:	80 91 96 00 	lds	r24, 0x0096
    1524:	90 91 97 00 	lds	r25, 0x0097
    1528:	04 97       	sbiw	r24, 0x04	; 4
    152a:	09 f0       	breq	.+2      	; 0x152e <left_coner+0xfc>
    152c:	51 c0       	rjmp	.+162    	; 0x15d0 <left_coner+0x19e>
		if (RotateBlock % 4 == 0 && Now_PosiY> 7){
    152e:	80 91 8c 00 	lds	r24, 0x008C
    1532:	90 91 8d 00 	lds	r25, 0x008D
    1536:	83 70       	andi	r24, 0x03	; 3
    1538:	90 70       	andi	r25, 0x00	; 0
    153a:	89 2b       	or	r24, r25
    153c:	49 f4       	brne	.+18     	; 0x1550 <left_coner+0x11e>
    153e:	80 91 82 00 	lds	r24, 0x0082
    1542:	90 91 83 00 	lds	r25, 0x0083
    1546:	08 97       	sbiw	r24, 0x08	; 8
    1548:	1c f0       	brlt	.+6      	; 0x1550 <left_coner+0x11e>
			 Now_PosiY = 7;
    154a:	87 e0       	ldi	r24, 0x07	; 7
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	25 c0       	rjmp	.+74     	; 0x159a <left_coner+0x168>
		}
		else if (RotateBlock % 4 == 1 && Now_PosiY > 6){
    1550:	80 91 8c 00 	lds	r24, 0x008C
    1554:	90 91 8d 00 	lds	r25, 0x008D
    1558:	64 e0       	ldi	r22, 0x04	; 4
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	49 f4       	brne	.+18     	; 0x1576 <left_coner+0x144>
    1564:	80 91 82 00 	lds	r24, 0x0082
    1568:	90 91 83 00 	lds	r25, 0x0083
    156c:	07 97       	sbiw	r24, 0x07	; 7
    156e:	1c f0       	brlt	.+6      	; 0x1576 <left_coner+0x144>
			 Now_PosiY = 6;
    1570:	86 e0       	ldi	r24, 0x06	; 6
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	12 c0       	rjmp	.+36     	; 0x159a <left_coner+0x168>
		}
		else if (RotateBlock % 4 == 2 && Now_PosiY > 8){
    1576:	80 91 8c 00 	lds	r24, 0x008C
    157a:	90 91 8d 00 	lds	r25, 0x008D
    157e:	64 e0       	ldi	r22, 0x04	; 4
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    1586:	02 97       	sbiw	r24, 0x02	; 2
    1588:	69 f4       	brne	.+26     	; 0x15a4 <left_coner+0x172>
    158a:	80 91 82 00 	lds	r24, 0x0082
    158e:	90 91 83 00 	lds	r25, 0x0083
    1592:	09 97       	sbiw	r24, 0x09	; 9
    1594:	3c f0       	brlt	.+14     	; 0x15a4 <left_coner+0x172>
			 Now_PosiY = 8;
    1596:	88 e0       	ldi	r24, 0x08	; 8
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	90 93 83 00 	sts	0x0083, r25
    159e:	80 93 82 00 	sts	0x0082, r24
    15a2:	08 95       	ret
		}
		else if (RotateBlock % 4 == 3 && Now_PosiY > 8){
    15a4:	80 91 8c 00 	lds	r24, 0x008C
    15a8:	90 91 8d 00 	lds	r25, 0x008D
    15ac:	64 e0       	ldi	r22, 0x04	; 4
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    15b4:	03 97       	sbiw	r24, 0x03	; 3
    15b6:	61 f4       	brne	.+24     	; 0x15d0 <left_coner+0x19e>
    15b8:	80 91 82 00 	lds	r24, 0x0082
    15bc:	90 91 83 00 	lds	r25, 0x0083
    15c0:	09 97       	sbiw	r24, 0x09	; 9
    15c2:	34 f0       	brlt	.+12     	; 0x15d0 <left_coner+0x19e>
			 Now_PosiY = 8;
    15c4:	88 e0       	ldi	r24, 0x08	; 8
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	90 93 83 00 	sts	0x0083, r25
    15cc:	80 93 82 00 	sts	0x0082, r24
    15d0:	08 95       	ret

000015d2 <clearMatchedRow>:
		}
	}
}

int clearMatchedRow(){
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	00 e0       	ldi	r16, 0x00	; 0
    15e6:	10 e0       	ldi	r17, 0x00	; 0
    15e8:	c0 e1       	ldi	r28, 0x10	; 16
    15ea:	d0 e0       	ldi	r29, 0x00	; 0
}

int getRow(int x) {
	int row = 0;
	for (int i = 1; i <= 8; i++){
		 row = row | (matrix[x][i] << (8-i));
    15ec:	28 e0       	ldi	r18, 0x08	; 8
    15ee:	c2 2e       	mov	r12, r18
    15f0:	d1 2c       	mov	r13, r1
				matrix[1][p] = 0;
			}
			
			i++;                    //get score
			OVER = 1;
			 PORTD_DATA = 0X01;      //0b00000001
    15f2:	bb 24       	eor	r11, r11
    15f4:	b3 94       	inc	r11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15f6:	98 ec       	ldi	r25, 0xC8	; 200
    15f8:	e9 2e       	mov	r14, r25
    15fa:	f1 2c       	mov	r15, r1
    15fc:	6b c0       	rjmp	.+214    	; 0x16d4 <clearMatchedRow+0x102>
}

int getRow(int x) {
	int row = 0;
	for (int i = 1; i <= 8; i++){
		 row = row | (matrix[x][i] << (8-i));
    15fe:	fb 01       	movw	r30, r22
    1600:	e4 0f       	add	r30, r20
    1602:	f5 1f       	adc	r31, r21
    1604:	ee 0f       	add	r30, r30
    1606:	ff 1f       	adc	r31, r31
    1608:	e6 53       	subi	r30, 0x36	; 54
    160a:	fe 4f       	sbci	r31, 0xFE	; 254
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	96 01       	movw	r18, r12
    1612:	24 1b       	sub	r18, r20
    1614:	35 0b       	sbc	r19, r21
    1616:	02 c0       	rjmp	.+4      	; 0x161c <clearMatchedRow+0x4a>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	2a 95       	dec	r18
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <clearMatchedRow+0x46>
    1620:	a8 2b       	or	r26, r24
    1622:	b9 2b       	or	r27, r25
	matrix[r][c] = 1;
}

int getRow(int x) {
	int row = 0;
	for (int i = 1; i <= 8; i++){
    1624:	4f 5f       	subi	r20, 0xFF	; 255
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	49 30       	cpi	r20, 0x09	; 9
    162a:	51 05       	cpc	r21, r1
    162c:	41 f7       	brne	.-48     	; 0x15fe <clearMatchedRow+0x2c>
int clearMatchedRow(){
	int i,j,k,p;
	int OVER = 0;

	for (i = 16; i >= 1; i--){
		if (getRow(i) == 255) {
    162e:	af 3f       	cpi	r26, 0xFF	; 255
    1630:	b1 05       	cpc	r27, r1
    1632:	09 f0       	breq	.+2      	; 0x1636 <clearMatchedRow+0x64>
    1634:	4b c0       	rjmp	.+150    	; 0x16cc <clearMatchedRow+0xfa>
			for (j = i-1; j >= 1; j--){
    1636:	ae 01       	movw	r20, r28
    1638:	2b c0       	rjmp	.+86     	; 0x1690 <clearMatchedRow+0xbe>
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	ca 01       	movw	r24, r20
    1640:	01 96       	adiw	r24, 0x01	; 1
				for (k = 1; k <= 8; k++){
					matrix[j+1][k] = matrix[j][k];
    1642:	da 01       	movw	r26, r20
    1644:	f3 e0       	ldi	r31, 0x03	; 3
    1646:	aa 0f       	add	r26, r26
    1648:	bb 1f       	adc	r27, r27
    164a:	fa 95       	dec	r31
    164c:	e1 f7       	brne	.-8      	; 0x1646 <clearMatchedRow+0x74>
    164e:	a4 0f       	add	r26, r20
    1650:	b5 1f       	adc	r27, r21
    1652:	bc 01       	movw	r22, r24
    1654:	e3 e0       	ldi	r30, 0x03	; 3
    1656:	66 0f       	add	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	ea 95       	dec	r30
    165c:	e1 f7       	brne	.-8      	; 0x1656 <clearMatchedRow+0x84>
    165e:	68 0f       	add	r22, r24
    1660:	79 1f       	adc	r23, r25
    1662:	fd 01       	movw	r30, r26
    1664:	e2 0f       	add	r30, r18
    1666:	f3 1f       	adc	r31, r19
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	e6 53       	subi	r30, 0x36	; 54
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	fb 01       	movw	r30, r22
    1676:	e2 0f       	add	r30, r18
    1678:	f3 1f       	adc	r31, r19
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	e6 53       	subi	r30, 0x36	; 54
    1680:	fe 4f       	sbci	r31, 0xFE	; 254
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
	int OVER = 0;

	for (i = 16; i >= 1; i--){
		if (getRow(i) == 255) {
			for (j = i-1; j >= 1; j--){
				for (k = 1; k <= 8; k++){
    1686:	2f 5f       	subi	r18, 0xFF	; 255
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	29 30       	cpi	r18, 0x09	; 9
    168c:	31 05       	cpc	r19, r1
    168e:	49 f7       	brne	.-46     	; 0x1662 <clearMatchedRow+0x90>
	int i,j,k,p;
	int OVER = 0;

	for (i = 16; i >= 1; i--){
		if (getRow(i) == 255) {
			for (j = i-1; j >= 1; j--){
    1690:	41 50       	subi	r20, 0x01	; 1
    1692:	50 40       	sbci	r21, 0x00	; 0
    1694:	14 16       	cp	r1, r20
    1696:	15 06       	cpc	r1, r21
    1698:	84 f2       	brlt	.-96     	; 0x163a <clearMatchedRow+0x68>
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
				for (k = 1; k <= 8; k++){
					matrix[j+1][k] = matrix[j][k];
				}
			}
			for (p = 1; p <= 8; p++){
				matrix[1][p] = 0;
    169e:	fc 01       	movw	r30, r24
    16a0:	ee 0f       	add	r30, r30
    16a2:	ff 1f       	adc	r31, r31
    16a4:	e4 52       	subi	r30, 0x24	; 36
    16a6:	fe 4f       	sbci	r31, 0xFE	; 254
    16a8:	11 82       	std	Z+1, r1	; 0x01
    16aa:	10 82       	st	Z, r1
			for (j = i-1; j >= 1; j--){
				for (k = 1; k <= 8; k++){
					matrix[j+1][k] = matrix[j][k];
				}
			}
			for (p = 1; p <= 8; p++){
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	89 30       	cpi	r24, 0x09	; 9
    16b0:	91 05       	cpc	r25, r1
    16b2:	a9 f7       	brne	.-22     	; 0x169e <clearMatchedRow+0xcc>
				matrix[1][p] = 0;
			}
			
			i++;                    //get score
			OVER = 1;
			 PORTD_DATA = 0X01;      //0b00000001
    16b4:	b2 ba       	out	0x12, r11	; 18
    16b6:	84 ef       	ldi	r24, 0xF4	; 244
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	f7 01       	movw	r30, r14
    16bc:	31 97       	sbiw	r30, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <clearMatchedRow+0xea>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	d9 f7       	brne	.-10     	; 0x16ba <clearMatchedRow+0xe8>
			}
			for (p = 1; p <= 8; p++){
				matrix[1][p] = 0;
			}
			
			i++;                    //get score
    16c4:	21 96       	adiw	r28, 0x01	; 1
			OVER = 1;
			 PORTD_DATA = 0X01;      //0b00000001
			_delay_ms(50);
			PORTD_DATA = 0X00;       //0b00000000
    16c6:	12 ba       	out	0x12, r1	; 18
    16c8:	01 e0       	ldi	r16, 0x01	; 1
    16ca:	10 e0       	ldi	r17, 0x00	; 0

int clearMatchedRow(){
	int i,j,k,p;
	int OVER = 0;

	for (i = 16; i >= 1; i--){
    16cc:	21 97       	sbiw	r28, 0x01	; 1
    16ce:	1c 16       	cp	r1, r28
    16d0:	1d 06       	cpc	r1, r29
    16d2:	6c f4       	brge	.+26     	; 0x16ee <clearMatchedRow+0x11c>
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	a0 e0       	ldi	r26, 0x00	; 0
    16da:	b0 e0       	ldi	r27, 0x00	; 0
}

int getRow(int x) {
	int row = 0;
	for (int i = 1; i <= 8; i++){
		 row = row | (matrix[x][i] << (8-i));
    16dc:	be 01       	movw	r22, r28
    16de:	33 e0       	ldi	r19, 0x03	; 3
    16e0:	66 0f       	add	r22, r22
    16e2:	77 1f       	adc	r23, r23
    16e4:	3a 95       	dec	r19
    16e6:	e1 f7       	brne	.-8      	; 0x16e0 <clearMatchedRow+0x10e>
    16e8:	6c 0f       	add	r22, r28
    16ea:	7d 1f       	adc	r23, r29
    16ec:	88 cf       	rjmp	.-240    	; 0x15fe <clearMatchedRow+0x2c>
			_delay_ms(50);
			PORTD_DATA = 0X00;       //0b00000000
		}
	}
	return OVER;
}
    16ee:	c8 01       	movw	r24, r16
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	df 90       	pop	r13
    16fe:	cf 90       	pop	r12
    1700:	bf 90       	pop	r11
    1702:	08 95       	ret

00001704 <myInterrupt>:
}


void myInterrupt()
{
	GICR =  1<<INT1 | 1<<INT0 | 1<<INT2;
    1704:	80 ee       	ldi	r24, 0xE0	; 224
    1706:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1 <<ISC11 | 1 << ISC01;
    1708:	8a e0       	ldi	r24, 0x0A	; 10
    170a:	85 bf       	out	0x35, r24	; 53
	sei();
    170c:	78 94       	sei
}
    170e:	08 95       	ret

00001710 <__vector_1>:


//---------------------------------------------------------

ISR(INT0_vect){  ///left shift
    1710:	1f 92       	push	r1
    1712:	0f 92       	push	r0
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	0f 92       	push	r0
    1718:	11 24       	eor	r1, r1
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
	
	Cancel_BlockType(Now_PosiX, Now_PosiY, BlockType);
    1732:	80 91 80 00 	lds	r24, 0x0080
    1736:	90 91 81 00 	lds	r25, 0x0081
    173a:	60 91 82 00 	lds	r22, 0x0082
    173e:	70 91 83 00 	lds	r23, 0x0083
    1742:	40 91 96 00 	lds	r20, 0x0096
    1746:	50 91 97 00 	lds	r21, 0x0097
    174a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <Cancel_BlockType>
	After_PosiY = Now_PosiY;
    174e:	80 91 82 00 	lds	r24, 0x0082
    1752:	90 91 83 00 	lds	r25, 0x0083
    1756:	90 93 87 00 	sts	0x0087, r25
    175a:	80 93 86 00 	sts	0x0086, r24

	Now_PosiY++;
    175e:	80 91 82 00 	lds	r24, 0x0082
    1762:	90 91 83 00 	lds	r25, 0x0083
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	90 93 83 00 	sts	0x0083, r25
    176c:	80 93 82 00 	sts	0x0082, r24
	if (getBlock(Now_PosiX,Now_PosiY,BlockType) == 0) {
    1770:	80 91 80 00 	lds	r24, 0x0080
    1774:	90 91 81 00 	lds	r25, 0x0081
    1778:	60 91 82 00 	lds	r22, 0x0082
    177c:	70 91 83 00 	lds	r23, 0x0083
    1780:	40 91 96 00 	lds	r20, 0x0096
    1784:	50 91 97 00 	lds	r21, 0x0097
    1788:	0e 94 05 06 	call	0xc0a	; 0xc0a <getBlock>
    178c:	89 2b       	or	r24, r25
    178e:	b1 f4       	brne	.+44     	; 0x17bc <__vector_1+0xac>
		Now_PosiY = After_PosiY;
    1790:	80 91 86 00 	lds	r24, 0x0086
    1794:	90 91 87 00 	lds	r25, 0x0087
    1798:	90 93 83 00 	sts	0x0083, r25
    179c:	80 93 82 00 	sts	0x0082, r24
		getBlock(Now_PosiX,Now_PosiY,BlockType);
    17a0:	80 91 80 00 	lds	r24, 0x0080
    17a4:	90 91 81 00 	lds	r25, 0x0081
    17a8:	60 91 82 00 	lds	r22, 0x0082
    17ac:	70 91 83 00 	lds	r23, 0x0083
    17b0:	40 91 96 00 	lds	r20, 0x0096
    17b4:	50 91 97 00 	lds	r21, 0x0097
    17b8:	0e 94 05 06 	call	0xc0a	; 0xc0a <getBlock>
	}
}
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_2>:

ISR(INT1_vect){
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31

	Cancel_BlockType(Now_PosiX, Now_PosiY, BlockType);
    1800:	80 91 80 00 	lds	r24, 0x0080
    1804:	90 91 81 00 	lds	r25, 0x0081
    1808:	60 91 82 00 	lds	r22, 0x0082
    180c:	70 91 83 00 	lds	r23, 0x0083
    1810:	40 91 96 00 	lds	r20, 0x0096
    1814:	50 91 97 00 	lds	r21, 0x0097
    1818:	0e 94 1e 06 	call	0xc3c	; 0xc3c <Cancel_BlockType>
	After_PosiY= Now_PosiY;
    181c:	80 91 82 00 	lds	r24, 0x0082
    1820:	90 91 83 00 	lds	r25, 0x0083
    1824:	90 93 87 00 	sts	0x0087, r25
    1828:	80 93 86 00 	sts	0x0086, r24

	Now_PosiY--;
    182c:	80 91 82 00 	lds	r24, 0x0082
    1830:	90 91 83 00 	lds	r25, 0x0083
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	90 93 83 00 	sts	0x0083, r25
    183a:	80 93 82 00 	sts	0x0082, r24
	
	if (getBlock(Now_PosiX,Now_PosiY,BlockType) == 0) {
    183e:	80 91 80 00 	lds	r24, 0x0080
    1842:	90 91 81 00 	lds	r25, 0x0081
    1846:	60 91 82 00 	lds	r22, 0x0082
    184a:	70 91 83 00 	lds	r23, 0x0083
    184e:	40 91 96 00 	lds	r20, 0x0096
    1852:	50 91 97 00 	lds	r21, 0x0097
    1856:	0e 94 05 06 	call	0xc0a	; 0xc0a <getBlock>
    185a:	89 2b       	or	r24, r25
    185c:	b1 f4       	brne	.+44     	; 0x188a <__vector_2+0xac>
		Now_PosiY= After_PosiY;
    185e:	80 91 86 00 	lds	r24, 0x0086
    1862:	90 91 87 00 	lds	r25, 0x0087
    1866:	90 93 83 00 	sts	0x0083, r25
    186a:	80 93 82 00 	sts	0x0082, r24
		
		getBlock(Now_PosiX,Now_PosiY,BlockType);
    186e:	80 91 80 00 	lds	r24, 0x0080
    1872:	90 91 81 00 	lds	r25, 0x0081
    1876:	60 91 82 00 	lds	r22, 0x0082
    187a:	70 91 83 00 	lds	r23, 0x0083
    187e:	40 91 96 00 	lds	r20, 0x0096
    1882:	50 91 97 00 	lds	r21, 0x0097
    1886:	0e 94 05 06 	call	0xc0a	; 0xc0a <getBlock>
	}
}
    188a:	ff 91       	pop	r31
    188c:	ef 91       	pop	r30
    188e:	bf 91       	pop	r27
    1890:	af 91       	pop	r26
    1892:	9f 91       	pop	r25
    1894:	8f 91       	pop	r24
    1896:	7f 91       	pop	r23
    1898:	6f 91       	pop	r22
    189a:	5f 91       	pop	r21
    189c:	4f 91       	pop	r20
    189e:	3f 91       	pop	r19
    18a0:	2f 91       	pop	r18
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <__vector_3>:

ISR(INT2_vect){
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	2f 93       	push	r18
    18b8:	3f 93       	push	r19
    18ba:	4f 93       	push	r20
    18bc:	5f 93       	push	r21
    18be:	6f 93       	push	r22
    18c0:	7f 93       	push	r23
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	af 93       	push	r26
    18c8:	bf 93       	push	r27
    18ca:	ef 93       	push	r30
    18cc:	ff 93       	push	r31
	
	Cancel_BlockType(Now_PosiX,Now_PosiY,BlockType);
    18ce:	80 91 80 00 	lds	r24, 0x0080
    18d2:	90 91 81 00 	lds	r25, 0x0081
    18d6:	60 91 82 00 	lds	r22, 0x0082
    18da:	70 91 83 00 	lds	r23, 0x0083
    18de:	40 91 96 00 	lds	r20, 0x0096
    18e2:	50 91 97 00 	lds	r21, 0x0097
    18e6:	0e 94 1e 06 	call	0xc3c	; 0xc3c <Cancel_BlockType>
	RotateBlock = (RotateBlock + 1)%4;
    18ea:	80 91 8c 00 	lds	r24, 0x008C
    18ee:	90 91 8d 00 	lds	r25, 0x008D
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	64 e0       	ldi	r22, 0x04	; 4
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    18fc:	90 93 8d 00 	sts	0x008D, r25
    1900:	80 93 8c 00 	sts	0x008C, r24
	getBlock(Now_PosiX,Now_PosiY,BlockType);
    1904:	80 91 80 00 	lds	r24, 0x0080
    1908:	90 91 81 00 	lds	r25, 0x0081
    190c:	60 91 82 00 	lds	r22, 0x0082
    1910:	70 91 83 00 	lds	r23, 0x0083
    1914:	40 91 96 00 	lds	r20, 0x0096
    1918:	50 91 97 00 	lds	r21, 0x0097
    191c:	0e 94 05 06 	call	0xc0a	; 0xc0a <getBlock>
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <Game_Play>:
	return OVER;
}

void Game_Play(){

	if(matrixfull()==1){
    1942:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <matrixfull>
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	81 f4       	brne	.+32     	; 0x196a <Game_Play+0x28>
		memset(matrix,0,sizeof(matrix));
    194a:	2a ec       	ldi	r18, 0xCA	; 202
    194c:	31 e0       	ldi	r19, 0x01	; 1
    194e:	c9 01       	movw	r24, r18
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	42 e3       	ldi	r20, 0x32	; 50
    1956:	51 e0       	ldi	r21, 0x01	; 1
    1958:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <memset>
		makeBOARD();
    195c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <makeBOARD>
		Continue_game=0;
    1960:	10 92 93 00 	sts	0x0093, r1
    1964:	10 92 92 00 	sts	0x0092, r1
    1968:	08 95       	ret
		return;
	}
	
	if (Now_PosiX == 1) {
    196a:	80 91 80 00 	lds	r24, 0x0080
    196e:	90 91 81 00 	lds	r25, 0x0081
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	79 f4       	brne	.+30     	; 0x1994 <Game_Play+0x52>
		BlockType = (rand() % 4) + 1;
    1976:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <rand>
    197a:	64 e0       	ldi	r22, 0x04	; 4
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    1982:	01 96       	adiw	r24, 0x01	; 1
    1984:	90 93 97 00 	sts	0x0097, r25
    1988:	80 93 96 00 	sts	0x0096, r24
		RotateBlock=0;
    198c:	10 92 8d 00 	sts	0x008D, r1
    1990:	10 92 8c 00 	sts	0x008C, r1
	}
	
	
	if (getBlock(Now_PosiX, Now_PosiY, BlockType) == 0) {
    1994:	80 91 80 00 	lds	r24, 0x0080
    1998:	90 91 81 00 	lds	r25, 0x0081
    199c:	60 91 82 00 	lds	r22, 0x0082
    19a0:	70 91 83 00 	lds	r23, 0x0083
    19a4:	40 91 96 00 	lds	r20, 0x0096
    19a8:	50 91 97 00 	lds	r21, 0x0097
    19ac:	0e 94 05 06 	call	0xc0a	; 0xc0a <getBlock>
    19b0:	89 2b       	or	r24, r25
    19b2:	a1 f4       	brne	.+40     	; 0x19dc <Game_Play+0x9a>
		getBlock(After_PosiX, Now_PosiY, BlockType);
    19b4:	80 91 84 00 	lds	r24, 0x0084
    19b8:	90 91 85 00 	lds	r25, 0x0085
    19bc:	60 91 82 00 	lds	r22, 0x0082
    19c0:	70 91 83 00 	lds	r23, 0x0083
    19c4:	40 91 96 00 	lds	r20, 0x0096
    19c8:	50 91 97 00 	lds	r21, 0x0097
    19cc:	0e 94 05 06 	call	0xc0a	; 0xc0a <getBlock>
		stop_Block  = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	90 93 8f 00 	sts	0x008F, r25
    19d8:	80 93 8e 00 	sts	0x008E, r24
	}
	After_PosiX = Now_PosiX;
    19dc:	80 91 80 00 	lds	r24, 0x0080
    19e0:	90 91 81 00 	lds	r25, 0x0081
    19e4:	90 93 85 00 	sts	0x0085, r25
    19e8:	80 93 84 00 	sts	0x0084, r24

	makeBOARD();
    19ec:	0e 94 53 08 	call	0x10a6	; 0x10a6 <makeBOARD>

	if(stop_Block  == 0) {
    19f0:	80 91 8e 00 	lds	r24, 0x008E
    19f4:	90 91 8f 00 	lds	r25, 0x008F
    19f8:	89 2b       	or	r24, r25
    19fa:	c1 f4       	brne	.+48     	; 0x1a2c <Game_Play+0xea>
		Cancel_BlockType(Now_PosiX, Now_PosiY, BlockType);
    19fc:	80 91 80 00 	lds	r24, 0x0080
    1a00:	90 91 81 00 	lds	r25, 0x0081
    1a04:	60 91 82 00 	lds	r22, 0x0082
    1a08:	70 91 83 00 	lds	r23, 0x0083
    1a0c:	40 91 96 00 	lds	r20, 0x0096
    1a10:	50 91 97 00 	lds	r21, 0x0097
    1a14:	0e 94 1e 06 	call	0xc3c	; 0xc3c <Cancel_BlockType>
		Now_PosiX++;
    1a18:	80 91 80 00 	lds	r24, 0x0080
    1a1c:	90 91 81 00 	lds	r25, 0x0081
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	90 93 81 00 	sts	0x0081, r25
    1a26:	80 93 80 00 	sts	0x0080, r24
    1a2a:	10 c0       	rjmp	.+32     	; 0x1a4c <Game_Play+0x10a>
	}
	else {
		Now_PosiX = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	90 93 81 00 	sts	0x0081, r25
    1a34:	80 93 80 00 	sts	0x0080, r24
		Now_PosiY = 4;
    1a38:	84 e0       	ldi	r24, 0x04	; 4
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	90 93 83 00 	sts	0x0083, r25
    1a40:	80 93 82 00 	sts	0x0082, r24
		stop_Block  = 0;
    1a44:	10 92 8f 00 	sts	0x008F, r1
    1a48:	10 92 8e 00 	sts	0x008E, r1
	}

	if (clearMatchedRow() == 1) makeBOARD();
    1a4c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <clearMatchedRow>
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	11 f4       	brne	.+4      	; 0x1a58 <Game_Play+0x116>
    1a54:	0e 94 53 08 	call	0x10a6	; 0x10a6 <makeBOARD>
    1a58:	08 95       	ret

00001a5a <main>:
	
}

//-----------------------------------------------

int main(void){
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
	
	ATMEGA_LCD = 0X00;
    1a64:	17 ba       	out	0x17, r1	; 23
	DECODDER_2 = 0XFF;
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
    1a68:	8a bb       	out	0x1a, r24	; 26
	DDRD_2 = 0X11 ;               //0b00010001
    1a6a:	81 e1       	ldi	r24, 0x11	; 17
    1a6c:	81 bb       	out	0x11, r24	; 17
	
	memset(matrix, 0, sizeof(matrix));            //memset(void *ptr, int x, size_t n);
    1a6e:	2a ec       	ldi	r18, 0xCA	; 202
    1a70:	31 e0       	ldi	r19, 0x01	; 1
    1a72:	c9 01       	movw	r24, r18
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	42 e3       	ldi	r20, 0x32	; 50
    1a7a:	51 e0       	ldi	r21, 0x01	; 1
    1a7c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <memset>
	memset(blockStore, 0, sizeof(blockStore));
    1a80:	e8 e9       	ldi	r30, 0x98	; 152
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	82 e3       	ldi	r24, 0x32	; 50
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	df 01       	movw	r26, r30
    1a8a:	9c 01       	movw	r18, r24
    1a8c:	1d 92       	st	X+, r1
    1a8e:	21 50       	subi	r18, 0x01	; 1
    1a90:	30 40       	sbci	r19, 0x00	; 0
    1a92:	e1 f7       	brne	.-8      	; 0x1a8c <main+0x32>
}


void myInterrupt()
{
	GICR =  1<<INT1 | 1<<INT0 | 1<<INT2;
    1a94:	80 ee       	ldi	r24, 0xE0	; 224
    1a96:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1 <<ISC11 | 1 << ISC01;
    1a98:	8a e0       	ldi	r24, 0x0A	; 10
    1a9a:	85 bf       	out	0x35, r24	; 53
	sei();
    1a9c:	78 94       	sei
	
	memset(matrix, 0, sizeof(matrix));            //memset(void *ptr, int x, size_t n);
	memset(blockStore, 0, sizeof(blockStore));

	myInterrupt();
	sei();
    1a9e:	78 94       	sei
				getFinalScore =1;
			}
			
			uint8_t temp = (PINB & 0X01);
			if(temp==0X01){
				Start_game = 1;
    1aa0:	c1 e0       	ldi	r28, 0x01	; 1
    1aa2:	d0 e0       	ldi	r29, 0x00	; 0
		if (Start_game==1 && Continue_game ==1){
			Game_Play();
		}
		else if(Start_game == 1 && Continue_game==0){
			if(getFinalScore==0){
				PORTD_DATA = 0X10;
    1aa4:	30 e1       	ldi	r19, 0x10	; 16
    1aa6:	f3 2e       	mov	r15, r19
    1aa8:	08 ec       	ldi	r16, 0xC8	; 200
    1aaa:	10 e0       	ldi	r17, 0x00	; 0

	myInterrupt();
	sei();
//	srand(time(0));    // Initialize random number generator.
	while(1){
		if (Start_game==1 && Continue_game ==1){
    1aac:	80 91 90 00 	lds	r24, 0x0090
    1ab0:	90 91 91 00 	lds	r25, 0x0091
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	11 f5       	brne	.+68     	; 0x1afc <main+0xa2>
    1ab8:	80 91 92 00 	lds	r24, 0x0092
    1abc:	90 91 93 00 	lds	r25, 0x0093
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	19 f4       	brne	.+6      	; 0x1acc <main+0x72>
			Game_Play();
    1ac6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Game_Play>
    1aca:	f0 cf       	rjmp	.-32     	; 0x1aac <main+0x52>
		}
		else if(Start_game == 1 && Continue_game==0){
    1acc:	89 2b       	or	r24, r25
    1ace:	b1 f4       	brne	.+44     	; 0x1afc <main+0xa2>
			if(getFinalScore==0){
    1ad0:	80 91 94 00 	lds	r24, 0x0094
    1ad4:	90 91 95 00 	lds	r25, 0x0095
    1ad8:	89 2b       	or	r24, r25
    1ada:	69 f4       	brne	.+26     	; 0x1af6 <main+0x9c>
				PORTD_DATA = 0X10;
    1adc:	f2 ba       	out	0x12, r15	; 18
    1ade:	84 ef       	ldi	r24, 0xF4	; 244
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	31 97       	sbiw	r30, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <main+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aea:	d9 f7       	brne	.-10     	; 0x1ae2 <main+0x88>
				_delay_ms(50);
				PORTD_DATA = 0X00;
    1aec:	12 ba       	out	0x12, r1	; 18
				getFinalScore =1;
    1aee:	d0 93 95 00 	sts	0x0095, r29
    1af2:	c0 93 94 00 	sts	0x0094, r28
			}
			
			uint8_t temp = (PINB & 0X01);
			if(temp==0X01){
    1af6:	b0 9b       	sbis	0x16, 0	; 22
    1af8:	d9 cf       	rjmp	.-78     	; 0x1aac <main+0x52>
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <main+0xa8>
				Continue_game= 1;
			}
		}
		else{
			// initial
			if(PINB==0X01){
    1afc:	86 b3       	in	r24, 0x16	; 22
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	a9 f6       	brne	.-86     	; 0x1aac <main+0x52>
				Start_game = 1;
    1b02:	d0 93 91 00 	sts	0x0091, r29
    1b06:	c0 93 90 00 	sts	0x0090, r28
				Continue_game= 1;
    1b0a:	d0 93 93 00 	sts	0x0093, r29
    1b0e:	c0 93 92 00 	sts	0x0092, r28
    1b12:	cc cf       	rjmp	.-104    	; 0x1aac <main+0x52>

00001b14 <__divmodhi4>:
    1b14:	97 fb       	bst	r25, 7
    1b16:	09 2e       	mov	r0, r25
    1b18:	07 26       	eor	r0, r23
    1b1a:	0a d0       	rcall	.+20     	; 0x1b30 <__divmodhi4_neg1>
    1b1c:	77 fd       	sbrc	r23, 7
    1b1e:	04 d0       	rcall	.+8      	; 0x1b28 <__divmodhi4_neg2>
    1b20:	0c d0       	rcall	.+24     	; 0x1b3a <__udivmodhi4>
    1b22:	06 d0       	rcall	.+12     	; 0x1b30 <__divmodhi4_neg1>
    1b24:	00 20       	and	r0, r0
    1b26:	1a f4       	brpl	.+6      	; 0x1b2e <__divmodhi4_exit>

00001b28 <__divmodhi4_neg2>:
    1b28:	70 95       	com	r23
    1b2a:	61 95       	neg	r22
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255

00001b2e <__divmodhi4_exit>:
    1b2e:	08 95       	ret

00001b30 <__divmodhi4_neg1>:
    1b30:	f6 f7       	brtc	.-4      	; 0x1b2e <__divmodhi4_exit>
    1b32:	90 95       	com	r25
    1b34:	81 95       	neg	r24
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	08 95       	ret

00001b3a <__udivmodhi4>:
    1b3a:	aa 1b       	sub	r26, r26
    1b3c:	bb 1b       	sub	r27, r27
    1b3e:	51 e1       	ldi	r21, 0x11	; 17
    1b40:	07 c0       	rjmp	.+14     	; 0x1b50 <__udivmodhi4_ep>

00001b42 <__udivmodhi4_loop>:
    1b42:	aa 1f       	adc	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	a6 17       	cp	r26, r22
    1b48:	b7 07       	cpc	r27, r23
    1b4a:	10 f0       	brcs	.+4      	; 0x1b50 <__udivmodhi4_ep>
    1b4c:	a6 1b       	sub	r26, r22
    1b4e:	b7 0b       	sbc	r27, r23

00001b50 <__udivmodhi4_ep>:
    1b50:	88 1f       	adc	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	5a 95       	dec	r21
    1b56:	a9 f7       	brne	.-22     	; 0x1b42 <__udivmodhi4_loop>
    1b58:	80 95       	com	r24
    1b5a:	90 95       	com	r25
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	08 95       	ret

00001b62 <do_rand>:
    1b62:	a0 e0       	ldi	r26, 0x00	; 0
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e7 eb       	ldi	r30, 0xB7	; 183
    1b68:	fd e0       	ldi	r31, 0x0D	; 13
    1b6a:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__prologue_saves__+0x10>
    1b6e:	ec 01       	movw	r28, r24
    1b70:	a8 80       	ld	r10, Y
    1b72:	b9 80       	ldd	r11, Y+1	; 0x01
    1b74:	ca 80       	ldd	r12, Y+2	; 0x02
    1b76:	db 80       	ldd	r13, Y+3	; 0x03
    1b78:	a1 14       	cp	r10, r1
    1b7a:	b1 04       	cpc	r11, r1
    1b7c:	c1 04       	cpc	r12, r1
    1b7e:	d1 04       	cpc	r13, r1
    1b80:	41 f4       	brne	.+16     	; 0x1b92 <do_rand+0x30>
    1b82:	84 e2       	ldi	r24, 0x24	; 36
    1b84:	a8 2e       	mov	r10, r24
    1b86:	89 ed       	ldi	r24, 0xD9	; 217
    1b88:	b8 2e       	mov	r11, r24
    1b8a:	8b e5       	ldi	r24, 0x5B	; 91
    1b8c:	c8 2e       	mov	r12, r24
    1b8e:	87 e0       	ldi	r24, 0x07	; 7
    1b90:	d8 2e       	mov	r13, r24
    1b92:	c6 01       	movw	r24, r12
    1b94:	b5 01       	movw	r22, r10
    1b96:	2d e1       	ldi	r18, 0x1D	; 29
    1b98:	33 ef       	ldi	r19, 0xF3	; 243
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__divmodsi4>
    1ba2:	27 ea       	ldi	r18, 0xA7	; 167
    1ba4:	31 e4       	ldi	r19, 0x41	; 65
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__mulsi3>
    1bae:	7b 01       	movw	r14, r22
    1bb0:	8c 01       	movw	r16, r24
    1bb2:	c6 01       	movw	r24, r12
    1bb4:	b5 01       	movw	r22, r10
    1bb6:	2d e1       	ldi	r18, 0x1D	; 29
    1bb8:	33 ef       	ldi	r19, 0xF3	; 243
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__divmodsi4>
    1bc2:	ca 01       	movw	r24, r20
    1bc4:	b9 01       	movw	r22, r18
    1bc6:	2c ee       	ldi	r18, 0xEC	; 236
    1bc8:	34 ef       	ldi	r19, 0xF4	; 244
    1bca:	4f ef       	ldi	r20, 0xFF	; 255
    1bcc:	5f ef       	ldi	r21, 0xFF	; 255
    1bce:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__mulsi3>
    1bd2:	6e 0d       	add	r22, r14
    1bd4:	7f 1d       	adc	r23, r15
    1bd6:	80 1f       	adc	r24, r16
    1bd8:	91 1f       	adc	r25, r17
    1bda:	97 ff       	sbrs	r25, 7
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <do_rand+0x84>
    1bde:	61 50       	subi	r22, 0x01	; 1
    1be0:	70 40       	sbci	r23, 0x00	; 0
    1be2:	80 40       	sbci	r24, 0x00	; 0
    1be4:	90 48       	sbci	r25, 0x80	; 128
    1be6:	68 83       	st	Y, r22
    1be8:	79 83       	std	Y+1, r23	; 0x01
    1bea:	8a 83       	std	Y+2, r24	; 0x02
    1bec:	9b 83       	std	Y+3, r25	; 0x03
    1bee:	9b 01       	movw	r18, r22
    1bf0:	3f 77       	andi	r19, 0x7F	; 127
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	ea e0       	ldi	r30, 0x0A	; 10
    1bfa:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__epilogue_restores__+0x10>

00001bfe <rand_r>:
    1bfe:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <do_rand>
    1c02:	08 95       	ret

00001c04 <rand>:
    1c04:	88 e8       	ldi	r24, 0x88	; 136
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <do_rand>
    1c0c:	08 95       	ret

00001c0e <srand>:
    1c0e:	a0 e0       	ldi	r26, 0x00	; 0
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	80 93 88 00 	sts	0x0088, r24
    1c16:	90 93 89 00 	sts	0x0089, r25
    1c1a:	a0 93 8a 00 	sts	0x008A, r26
    1c1e:	b0 93 8b 00 	sts	0x008B, r27
    1c22:	08 95       	ret

00001c24 <memset>:
    1c24:	dc 01       	movw	r26, r24
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <memset+0x6>
    1c28:	6d 93       	st	X+, r22
    1c2a:	41 50       	subi	r20, 0x01	; 1
    1c2c:	50 40       	sbci	r21, 0x00	; 0
    1c2e:	e0 f7       	brcc	.-8      	; 0x1c28 <memset+0x4>
    1c30:	08 95       	ret

00001c32 <__mulsi3>:
    1c32:	62 9f       	mul	r22, r18
    1c34:	d0 01       	movw	r26, r0
    1c36:	73 9f       	mul	r23, r19
    1c38:	f0 01       	movw	r30, r0
    1c3a:	82 9f       	mul	r24, r18
    1c3c:	e0 0d       	add	r30, r0
    1c3e:	f1 1d       	adc	r31, r1
    1c40:	64 9f       	mul	r22, r20
    1c42:	e0 0d       	add	r30, r0
    1c44:	f1 1d       	adc	r31, r1
    1c46:	92 9f       	mul	r25, r18
    1c48:	f0 0d       	add	r31, r0
    1c4a:	83 9f       	mul	r24, r19
    1c4c:	f0 0d       	add	r31, r0
    1c4e:	74 9f       	mul	r23, r20
    1c50:	f0 0d       	add	r31, r0
    1c52:	65 9f       	mul	r22, r21
    1c54:	f0 0d       	add	r31, r0
    1c56:	99 27       	eor	r25, r25
    1c58:	72 9f       	mul	r23, r18
    1c5a:	b0 0d       	add	r27, r0
    1c5c:	e1 1d       	adc	r30, r1
    1c5e:	f9 1f       	adc	r31, r25
    1c60:	63 9f       	mul	r22, r19
    1c62:	b0 0d       	add	r27, r0
    1c64:	e1 1d       	adc	r30, r1
    1c66:	f9 1f       	adc	r31, r25
    1c68:	bd 01       	movw	r22, r26
    1c6a:	cf 01       	movw	r24, r30
    1c6c:	11 24       	eor	r1, r1
    1c6e:	08 95       	ret

00001c70 <__divmodsi4>:
    1c70:	97 fb       	bst	r25, 7
    1c72:	09 2e       	mov	r0, r25
    1c74:	05 26       	eor	r0, r21
    1c76:	0e d0       	rcall	.+28     	; 0x1c94 <__divmodsi4_neg1>
    1c78:	57 fd       	sbrc	r21, 7
    1c7a:	04 d0       	rcall	.+8      	; 0x1c84 <__divmodsi4_neg2>
    1c7c:	4b d0       	rcall	.+150    	; 0x1d14 <__udivmodsi4>
    1c7e:	0a d0       	rcall	.+20     	; 0x1c94 <__divmodsi4_neg1>
    1c80:	00 1c       	adc	r0, r0
    1c82:	38 f4       	brcc	.+14     	; 0x1c92 <__divmodsi4_exit>

00001c84 <__divmodsi4_neg2>:
    1c84:	50 95       	com	r21
    1c86:	40 95       	com	r20
    1c88:	30 95       	com	r19
    1c8a:	21 95       	neg	r18
    1c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c90:	5f 4f       	sbci	r21, 0xFF	; 255

00001c92 <__divmodsi4_exit>:
    1c92:	08 95       	ret

00001c94 <__divmodsi4_neg1>:
    1c94:	f6 f7       	brtc	.-4      	; 0x1c92 <__divmodsi4_exit>
    1c96:	90 95       	com	r25
    1c98:	80 95       	com	r24
    1c9a:	70 95       	com	r23
    1c9c:	61 95       	neg	r22
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	08 95       	ret

00001ca6 <__prologue_saves__>:
    1ca6:	2f 92       	push	r2
    1ca8:	3f 92       	push	r3
    1caa:	4f 92       	push	r4
    1cac:	5f 92       	push	r5
    1cae:	6f 92       	push	r6
    1cb0:	7f 92       	push	r7
    1cb2:	8f 92       	push	r8
    1cb4:	9f 92       	push	r9
    1cb6:	af 92       	push	r10
    1cb8:	bf 92       	push	r11
    1cba:	cf 92       	push	r12
    1cbc:	df 92       	push	r13
    1cbe:	ef 92       	push	r14
    1cc0:	ff 92       	push	r15
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	ca 1b       	sub	r28, r26
    1cd0:	db 0b       	sbc	r29, r27
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	09 94       	ijmp

00001cde <__epilogue_restores__>:
    1cde:	2a 88       	ldd	r2, Y+18	; 0x12
    1ce0:	39 88       	ldd	r3, Y+17	; 0x11
    1ce2:	48 88       	ldd	r4, Y+16	; 0x10
    1ce4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ce6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ce8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cea:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cec:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cee:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cf0:	b9 84       	ldd	r11, Y+9	; 0x09
    1cf2:	c8 84       	ldd	r12, Y+8	; 0x08
    1cf4:	df 80       	ldd	r13, Y+7	; 0x07
    1cf6:	ee 80       	ldd	r14, Y+6	; 0x06
    1cf8:	fd 80       	ldd	r15, Y+5	; 0x05
    1cfa:	0c 81       	ldd	r16, Y+4	; 0x04
    1cfc:	1b 81       	ldd	r17, Y+3	; 0x03
    1cfe:	aa 81       	ldd	r26, Y+2	; 0x02
    1d00:	b9 81       	ldd	r27, Y+1	; 0x01
    1d02:	ce 0f       	add	r28, r30
    1d04:	d1 1d       	adc	r29, r1
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	ed 01       	movw	r28, r26
    1d12:	08 95       	ret

00001d14 <__udivmodsi4>:
    1d14:	a1 e2       	ldi	r26, 0x21	; 33
    1d16:	1a 2e       	mov	r1, r26
    1d18:	aa 1b       	sub	r26, r26
    1d1a:	bb 1b       	sub	r27, r27
    1d1c:	fd 01       	movw	r30, r26
    1d1e:	0d c0       	rjmp	.+26     	; 0x1d3a <__udivmodsi4_ep>

00001d20 <__udivmodsi4_loop>:
    1d20:	aa 1f       	adc	r26, r26
    1d22:	bb 1f       	adc	r27, r27
    1d24:	ee 1f       	adc	r30, r30
    1d26:	ff 1f       	adc	r31, r31
    1d28:	a2 17       	cp	r26, r18
    1d2a:	b3 07       	cpc	r27, r19
    1d2c:	e4 07       	cpc	r30, r20
    1d2e:	f5 07       	cpc	r31, r21
    1d30:	20 f0       	brcs	.+8      	; 0x1d3a <__udivmodsi4_ep>
    1d32:	a2 1b       	sub	r26, r18
    1d34:	b3 0b       	sbc	r27, r19
    1d36:	e4 0b       	sbc	r30, r20
    1d38:	f5 0b       	sbc	r31, r21

00001d3a <__udivmodsi4_ep>:
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	88 1f       	adc	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	1a 94       	dec	r1
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <__udivmodsi4_loop>
    1d46:	60 95       	com	r22
    1d48:	70 95       	com	r23
    1d4a:	80 95       	com	r24
    1d4c:	90 95       	com	r25
    1d4e:	9b 01       	movw	r18, r22
    1d50:	ac 01       	movw	r20, r24
    1d52:	bd 01       	movw	r22, r26
    1d54:	cf 01       	movw	r24, r30
    1d56:	08 95       	ret

00001d58 <_exit>:
    1d58:	f8 94       	cli

00001d5a <__stop_program>:
    1d5a:	ff cf       	rjmp	.-2      	; 0x1d5a <__stop_program>
